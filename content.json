{"meta":{"title":"leo的博客","subtitle":"一个折腾控写字的地方","description":null,"author":"leoatchina","url":"http://leoatchina.github.io"},"pages":[{"title":"分类","date":"2017-02-14T07:12:05.000Z","updated":"2017-02-14T07:20:53.627Z","comments":true,"path":"categories/index.html","permalink":"http://leoatchina.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2017-02-14T07:17:05.000Z","updated":"2017-02-14T07:18:44.291Z","comments":true,"path":"tags/index.html","permalink":"http://leoatchina.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"centos升级gcc","slug":"update-centos-gcc-compile-myself","date":"2017-02-15T01:43:18.000Z","updated":"2017-02-15T04:55:30.830Z","comments":true,"path":"2017/02/15/update-centos-gcc-compile-myself/","link":"","permalink":"http://leoatchina.github.io/2017/02/15/update-centos-gcc-compile-myself/","excerpt":"","text":"我的生信小型机装的系统是centos6.6,在装vim的插件YouCompleteMe时，需要gcc升级到4.8以上版本。网上搜索了一番后，编译安装最新版。 下载最新版gcc并解压 wget -c http://ftp.gnu.org/gnu/gcc/gcc-6.3.0/gcc-6.3.0.tar.bz2tar jxvf gcc-6.3.0.tar.bz2 下载另外所需文件 cd gcc-6.3.0./contrib/download_prerequisites 建立一个目录供编译出的文件存放 mkdir gcc-build-6.3.0cd gcc-build-6.3.0 生成Makefile文件,注意我把prefix设置成了 /usr,直接把gcc装到对应的目录，不需要ln -s了 ../configure -enable-checking=release -enable-languages=c,c++ -disable-multilib –prefix=/usr 编译,j后面是核心数，我因为是小型服务器，一共8核16线程，所以就设置的比较大，一般设置成4 make -j8 //我的cpu跑到了差不多满100% 安装 sudo make install 检查,如 gcc –versionc++ –versioncc –versionwhereis gccwhich gcc","categories":[{"name":"linux","slug":"linux","permalink":"http://leoatchina.github.io/categories/linux/"}],"tags":[{"name":"gcc","slug":"gcc","permalink":"http://leoatchina.github.io/tags/gcc/"},{"name":"centos","slug":"centos","permalink":"http://leoatchina.github.io/tags/centos/"},{"name":"linux","slug":"linux","permalink":"http://leoatchina.github.io/tags/linux/"},{"name":"编译","slug":"编译","permalink":"http://leoatchina.github.io/tags/编译/"},{"name":"c++","slug":"c","permalink":"http://leoatchina.github.io/tags/c/"}]},{"title":"python_thread_sync","slug":"python-thread-sync","date":"2017-02-14T07:55:14.000Z","updated":"2017-02-16T02:20:26.885Z","comments":true,"path":"2017/02/14/python-thread-sync/","link":"","permalink":"http://leoatchina.github.io/2017/02/14/python-thread-sync/","excerpt":"","text":"Python的代码的执行是由Python虚拟机（又名解释器主循环）进行控制的。Python在设计时就是这样考虑的，在主循环中同时只能有一个控制线程在执行，就像单核CPU系统中的多进程一样。内存中可以有许多程序，但是在任意给定时刻只能有一个程序在运行。同理，尽管Python解释器中可以运行多个线程，但是在任意给定时刻只有一个线程会被解释器执行。对Python虚拟机的访问是由全局解释锁（GIL）控制的。这个锁就是用来保证同时只能有一个线程运行的。在多线程环境中，Python虚拟机将按下面所述的方式执行。 设置GIL。 切换进一个线程去运行。 执行下面操作之一。 指定数量的字节码指令 线程主动让出控制权 把线程设置回睡眠状态 解锁GIL 重复上述步骤","categories":[{"name":"python","slug":"python","permalink":"http://leoatchina.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://leoatchina.github.io/tags/python/"},{"name":"thread","slug":"thread","permalink":"http://leoatchina.github.io/tags/thread/"}]},{"title":"sslocal+proxychains4解决阿里云vps访问github过慢问题","slug":"sslocal-proxychains-aliyun-github","date":"2017-02-14T06:58:08.494Z","updated":"2017-02-15T04:52:00.237Z","comments":true,"path":"2017/02/14/sslocal-proxychains-aliyun-github/","link":"","permalink":"http://leoatchina.github.io/2017/02/14/sslocal-proxychains-aliyun-github/","excerpt":"","text":"阿里云从github clone一些软件后再编译安装 ，速度都很慢。试过改host或者设置 git的proxy，效果都不好，后来用 sslocal+proxychains4解决问题。 1. 安装pip wget -c https://bootstrap.pypa.io/get-pip.pypython get-pip.py 2. 安装 sslocal pip install shadowsocks 3. 配置sslocal vim ~/sslocal.json12345678&#123; &quot;server&quot;:&quot;1.1.1.1&quot;, #可以使用的ss服务器IP &quot;server_port&quot;:1035, #ss服务器端口 &quot;local_address&quot;: &quot;0.0.0.0&quot;, #本地ip 注意：不要使用127.0.0.1或192.168.1.100等ip &quot;local_port&quot;:1080,#本地端口 &quot;password&quot;:&quot;password&quot;,#连接ss服务器密码 &quot;timeout&quot;:600,#等待超时 &quot;method&quot;:&quot;rc4-md5&quot;#加密方式 4. 启动sslocal，并加入开机启动 nohup sslocal -c ~/sslocal .json &gt;/dev/null 2&gt;&amp;1 &amp;echo “ nohup sslocal -c ~/sslocal .json &gt;/dev/null 2&gt;&amp;1 &amp;” &gt;/etc/rc.local 5. 编译安装最新版 proxychains4 wget -c https://github.com/rofl0r/proxychains-ng/releases/download/v4.11/proxychains-ng-5.11.tar.bz2otar zxf proxychains-ng-4.11.tar.bz2cd proxychains-ng-4.11./configure &amp;&amp; make &amp;&amp; make install &amp;&amp; make install-config 6. 编辑proxychains4配置文件 vim /usr/local/etc/proxychains.conf更改 socks4 127.0.0.1 9050为socks5 127.0.0.1 1080 7. 测试下你的代理 proxychains4 curl https://api.ipify.org/?format=json 如果配置正确，返回你的ss服务器的ip地址 8. 用proxychain4+git下载 proxychains4 git clone https://github.com/xxxxx/xxxxx.git 下面是我的一个测试结果，速度从4k提升到了1.5m123456789[proxychains] DLL init: proxychains-ng 4.11[proxychains] Strict chain ... 127.0.0.1:1080 ... github.com:443 ... OK[proxychains] DLL init: proxychains-ng 4.11[proxychains] Strict chain ... 127.0.0.1:1080 ... github.com:443 ... OKremote: Counting objects: 120391, done.[proxychains] DLL init: proxychains-ng 4.11remote: Total 120391 (delta 0), reused 0 (delta 0), pack-reused 120390Receiving objects: 100% (120391/120391), 84.22 MiB | 1.51 MiB/s, done.Resolving deltas: 100% (81308/81308), done.","categories":[{"name":"翻墙","slug":"翻墙","permalink":"http://leoatchina.github.io/categories/翻墙/"}],"tags":[{"name":"sslocal","slug":"sslocal","permalink":"http://leoatchina.github.io/tags/sslocal/"},{"name":"gfwlist","slug":"gfwlist","permalink":"http://leoatchina.github.io/tags/gfwlist/"},{"name":"proxychains4","slug":"proxychains4","permalink":"http://leoatchina.github.io/tags/proxychains4/"},{"name":"aliyun","slug":"aliyun","permalink":"http://leoatchina.github.io/tags/aliyun/"},{"name":"github","slug":"github","permalink":"http://leoatchina.github.io/tags/github/"}]},{"title":"安装新版htslib、bcftools、samtools","slug":"install_samtools_etc","date":"2017-02-14T06:37:32.494Z","updated":"2017-02-14T07:07:27.959Z","comments":true,"path":"2017/02/14/install_samtools_etc/","link":"","permalink":"http://leoatchina.github.io/2017/02/14/install_samtools_etc/","excerpt":"","text":"官方网站和github上的INSTALL/README有问题，要按照下面的方法安装develop版本的12345git clone --branch=develop git://github.com/samtools/htslib.gitgit clone --branch=develop git://github.com/samtools/bcftools.gitgit clone --branch=develop git://github.com/samtools/samtools.gitcd bcftools &amp;&amp; make &amp;&amp; make installcd ../samtools &amp;&amp; make &amp;&amp; make install","categories":[],"tags":[]},{"title":"leoatchina的第一篇hexo博客","slug":"hello-world","date":"2017-01-29T01:58:44.881Z","updated":"2017-02-15T10:24:10.356Z","comments":true,"path":"2017/01/29/hello-world/","link":"","permalink":"http://leoatchina.github.io/2017/01/29/hello-world/","excerpt":"","text":"leoatchina第一次用hexo进行博客写作，使用了next主题leoatchina是用atom进行博客写作，可以在官方网站atom.io上下载之所以用这个软件，原因 免费 配置可以用github进行同步 插件丰富,我主要用到的有 markdown-preview-plus markdown-writer markdown-previwe-opener //自动打开markdown preview markdown-scroll-sync //进行markdown写作时，写作区和预览区同步滚动 atom-hexo //hexo命令 vim-mode // 习惯vim的操作模式了 markclip，//这个是利器 见下面 写作时插入图片的方法 首先，在主配置目录的_config.yml里，设置 post_asset_folder: true 按正常的markdown语言进行写作 写作时正常截图，在安装了markclip之后，在文章里直接按ctrl+v,就可以在source/_posts目录下，建立一个和当前编辑的文件同名的文件夹，你的截图文件会自动放入这个文件夹，并在你markdown文件中插入这个图片的链接，如下 hexo clean | hexo g | hexo d，完成布置","categories":[],"tags":[]}]}