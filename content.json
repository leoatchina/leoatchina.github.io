{"meta":{"title":"leoatchina的博客","subtitle":"一个折腾控写字的地方,生信小菜鸟弱弱地打怪升级中。","description":null,"author":"leoatchina","url":"http://leoatchina.github.io"},"pages":[{"title":"分类","date":"2017-02-14T07:12:05.000Z","updated":"2017-02-14T07:20:53.627Z","comments":true,"path":"categories/index.html","permalink":"http://leoatchina.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2017-02-14T07:17:05.000Z","updated":"2017-02-14T07:18:44.291Z","comments":true,"path":"tags/index.html","permalink":"http://leoatchina.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"atom-shortcuts-windows","slug":"atom-shortcuts-windows","date":"2017-02-16T06:00:08.000Z","updated":"2017-02-16T06:02:10.857Z","comments":true,"path":"2017/02/16/atom-shortcuts-windows/","link":"","permalink":"http://leoatchina.github.io/2017/02/16/atom-shortcuts-windows/","excerpt":"","text":"文件操作‘ctrl-shift-s’ 保存所有打开的文件‘ctrl-shift-o’ 打开目录‘ctrl-p’ 从添加的项目中查找文件‘ctrl-f’ 向下翻页‘ctrl-b’ 向上翻页alt-b 或 ctrl-left 移动到单词开始alt-f 或 ctrl-right 移动到单词末尾ctrl-g 移动到指定行ctrl-j 将下一行与当前行合并ctrl-up, ctrl-down 使当前行向上或者向下移动ctrl-enter,ctrl-shift-enter在当前行的下一行或上一行插入新的一行ctrl-k ctrl-l使当前字符小写ctrl-k ctrl-u使当前字符大写ctrl-shift-D 复制当前行到下一行ctrl-shift-K 删除当前行ctrl-u删除到当前行开始alt-backspace或ctrl-alt-h删除到当前子单词开始alt-delete或ctrl-alt-d删除到当前子单词结束ctrl-backspace或ctrl-w或alt-h删除到当前单词开始alt-d或ctrl-delete删除到当前子单词开始alt-left: ‘editor:move-to-previous-subword-boundary’alt-right: ‘editor:move-to-next-subword-boundary’alt-shift-left: ‘editor:select-to-previous-subword-boundary’alt-shift-right: ‘editor:select-to-next-subword-boundary’ 选取alt-shift-B或 ctrl-shift-left 选取至字符开始alt-shift-F或ctrl-shift-right 选取至字符结束ctrl-a 全选alt-f3选取文档中和当前单词相同的所有单词shift-end 选取至本行结束ctrl-l 选取一行，继续按回选取下一行ctrl-d 选取文档中和当前单词相同的下一处 目录树操作ctrl-\\ 或 ctrl-k ctrl-b 显示或隐藏目录树a 在目录树下添加文件d 将当前文件另存为alt-right 和 alt-left 展开(隐藏)所有目录ctrl-k left 在左半视图中打开文件ctrl-k down在下半视图中打开文件ctrl-k up 在上半视图中打开文件ctrl-k right 在右半视图中打开文件ctrl-shift-C 复制当前文件绝对路径 其它ctrl-m 相应括号之间，html tag之间等跳转ctrl-alt-up, ctrl-alt-down 增加上（下）一行光标ctrl-shift-u 调出切换编码选项ctrl-f 在buffer中查找ctrl-shift-f 在整个工程中查找alt-ctrl-[ 折叠alt-ctrl-] 展开ctrl-alt-i调用控制台ctrl-/注释ctrl-alt-c打开color-picker","categories":[],"tags":[{"name":"atom","slug":"atom","permalink":"http://leoatchina.github.io/tags/atom/"},{"name":"shortcuts","slug":"shortcuts","permalink":"http://leoatchina.github.io/tags/shortcuts/"}]},{"title":"Atom MacOs 快捷键","slug":"atom-shortcuts-macos","date":"2017-02-16T05:39:55.000Z","updated":"2017-02-16T05:42:21.107Z","comments":true,"path":"2017/02/16/atom-shortcuts-macos/","link":"","permalink":"http://leoatchina.github.io/2017/02/16/atom-shortcuts-macos/","excerpt":"","text":"文件切换ctrl-shift-s 保存所有打开的文件cmd-shift-o 打开目录cmd-\\ 显示或隐藏目录树ctrl-0 焦点移到目录树目录树下，使用a，m，delete来增加，修改和删除cmd-t或cmd-p 查找文件cmd-b 在打开的文件之间切换cmd-shift-b 只搜索从上次git commit后修改或者新增的文件 导航（等价于上下左右）ctrl-p 前一行ctrl-n 后一行ctrl-f 前一个字符ctrl-b 后一个字符 alt-B, alt-left 移动到单词开始alt-F, alt-right 移动到单词末尾 cmd-right, ctrl-E 移动到一行结束cmd-left, ctrl-A 移动到一行开始 cmd-up 移动到文件开始cmd-down 移动到文件结束 ctrl-g 移动到指定行 row:column 处 cmd-r 在方法之间跳转 目录树操作cmd-\\ 或者 cmd-k cmd-b 显示(隐藏)目录树ctrl-0 焦点切换到目录树(再按一次或者Esc退出目录树)a 添加文件d 将当前文件另存为(duplicate)i 显示(隐藏)版本控制忽略的文件alt-right 和 alt-left 展开(隐藏)所有目录ctrl-al-] 和 ctrl-al-[ 同上ctrl-[ 和 ctrl-] 展开(隐藏)当前目录ctrl-f 和 ctrl-b 同上cmd-k h 或者 cmd-k left 在左半视图中打开文件cmd-k j 或者 cmd-k down 在下半视图中打开文件cmd-k k 或者 cmd-k up 在上半视图中打开文件cmd-k l 或者 cmd-k right 在右半视图中打开文件ctrl-shift-C 复制当前文件绝对路径 书签cmd-F2 在本行增加书签F2 跳到当前文件的下一条书签shift-F2 跳到当前文件的上一条书签ctrl-F2 列出当前工程所有书签 选取 大部分和导航一致，只不过加上shift ctrl-shift-P 选取至上一行ctrl-shift-N 选取至下一样ctrl-shift-B 选取至前一个字符ctrl-shift-F 选取至后一个字符alt-shift-B, alt-shift-left 选取至字符开始alt-shift-F, alt-shift-right 选取至字符结束ctrl-shift-E, cmd-shift-right 选取至本行结束ctrl-shift-A, cmd-shift-left 选取至本行开始cmd-shift-up 选取至文件开始cmd-shift-down 选取至文件结尾cmd-A 全选cmd-L 选取一行，继续按回选取下一行ctrl-shift-W 选取当前单词 编辑和删除文本基本操作ctrl-T 使光标前后字符交换cmd-J 将下一行与当前行合并ctrl-cmd-up, ctrl-cmd-down 使当前行向上或者向下移动cmd-shift-D 复制当前行到下一行cmd-K, cmd-U 使当前字符大写cmd-K, cmd-L 使当前字符小写cmd-shift-P 搜索命令 删除和剪切ctrl-shift-K 删除当前行cmd-backspace 删除到当前行开始cmd-fn-backspace 删除到当前行结束ctrl-K 剪切到当前行结束alt-backspace 或 alt-H 删除到当前单词开始alt-delete 或 alt-D 删除到当前单词结束 多光标和多处选取cmd-click 增加新光标cmd-shift-L 将多行选取改为多行光标ctrl-shift-up, ctrl-shift-down 增加上（下）一行光标cmd-D 选取文档中和当前单词相同的下一处ctrl-cmd-G 选取文档中所有和当前光标单词相同的位置 括号跳转ctrl-m 相应括号之间，html tag之间等跳转ctrl-cmd-m 括号(tag)之间文本选取alt-cmd-. 关闭当前XML/HTML tag 编码方式ctrl-shift-U 调出切换编码选项 查找和替换cmd-F 在buffer中查找cmd-shift-f 在整个工程中查找 代码片段alt-shift-S 查看当前可用代码片段 在~/.atom目录下snippets.cson文件中存放了你定制的snippets 定制说明 自动补全ctrl-space 提示补全信息 折叠alt-cmd-[ 折叠alt-cmd-] 展开alt-cmd-shift-{ 折叠全部alt-cmd-shift-} 展开全部cmd-k cmd-N 指定折叠层级 N为层级数 文件语法高亮ctrl-shift-L 选择文本类型 使用Atom进行写作ctrl-shift-M Markdown预览可用代码片段 b, legal, img, l, i, code, t, table git操作cmd-alt-Z checkout HEAD 版本cmd-shift-B 弹出untracked 和 modified文件列表alt-g down alt-g up 在修改处跳转alt-G D 弹出diff列表alt-G O 在github上打开文件alt-G G 在github上打开项目地址alt-G B 在github上打开文件blamealt-G H 在github上打开文件historyalt-G I 在github上打开issuesalt-G R 在github打开分支比较alt-G C 拷贝当前文件在gihub上的网址 推荐一些好用的插件 主题atom-material-ui 好看到爆atom-material-syntax 美化atom-beautify 一键代码美化file-icons 给文件加上好看的图标atom-minimap 方便美观的缩略滚动图pretty-json json格式化工具activate-power-mode 炫酷的打字特效 gitatomatigit 可视化git操作git-time-machine git版本对比工具，可视化选择每一个commitmerge-conflicts 合并冲突可视化工具 代码提示emmet 这个不用介绍了吧atom-ternjs js代码提示很强大，高度定制化docblockr jsdoc 给js添加注释autoclose-html 闭合html标签color-picker 取色器 必备插件pigments 颜色显示插件 必装terminal-panel 直接在atom里面写命令了svg-preview svg预览 便捷操作advanced-open-file 快速打开、切换文件project-folder 快速打开、切换项目script 立即执行当前js文件 高亮language-vue vue框架代码高亮 终端platformio-atom-ide-terminal 终端插件，支持显示、隐藏及多窗口 就这些了，欢迎pull更多好用的插件！","categories":[],"tags":[{"name":"atom","slug":"atom","permalink":"http://leoatchina.github.io/tags/atom/"},{"name":"shortcuts","slug":"shortcuts","permalink":"http://leoatchina.github.io/tags/shortcuts/"}]},{"title":"centos升级gcc","slug":"update-centos-gcc-compile-myself","date":"2017-02-15T01:43:18.000Z","updated":"2017-02-15T04:55:30.830Z","comments":true,"path":"2017/02/15/update-centos-gcc-compile-myself/","link":"","permalink":"http://leoatchina.github.io/2017/02/15/update-centos-gcc-compile-myself/","excerpt":"","text":"我的生信小型机装的系统是centos6.6,在装vim的插件YouCompleteMe时，需要gcc升级到4.8以上版本。网上搜索了一番后，编译安装最新版。 下载最新版gcc并解压 wget -c http://ftp.gnu.org/gnu/gcc/gcc-6.3.0/gcc-6.3.0.tar.bz2tar jxvf gcc-6.3.0.tar.bz2 下载另外所需文件 cd gcc-6.3.0./contrib/download_prerequisites 建立一个目录供编译出的文件存放 mkdir gcc-build-6.3.0cd gcc-build-6.3.0 生成Makefile文件,注意我把prefix设置成了 /usr,直接把gcc装到对应的目录，不需要ln -s了 ../configure -enable-checking=release -enable-languages=c,c++ -disable-multilib –prefix=/usr 编译,j后面是核心数，我因为是小型服务器，一共8核16线程，所以就设置的比较大，一般设置成4 make -j8 //我的cpu跑到了差不多满100% 安装 sudo make install 检查,如 gcc –versionc++ –versioncc –versionwhereis gccwhich gcc","categories":[{"name":"linux","slug":"linux","permalink":"http://leoatchina.github.io/categories/linux/"}],"tags":[{"name":"gcc","slug":"gcc","permalink":"http://leoatchina.github.io/tags/gcc/"},{"name":"centos","slug":"centos","permalink":"http://leoatchina.github.io/tags/centos/"},{"name":"linux","slug":"linux","permalink":"http://leoatchina.github.io/tags/linux/"},{"name":"编译","slug":"编译","permalink":"http://leoatchina.github.io/tags/编译/"},{"name":"c++","slug":"c","permalink":"http://leoatchina.github.io/tags/c/"}]},{"title":"python_thread_sync","slug":"python-thread-sync","date":"2017-02-14T07:55:14.000Z","updated":"2017-02-17T07:30:11.709Z","comments":true,"path":"2017/02/14/python-thread-sync/","link":"","permalink":"http://leoatchina.github.io/2017/02/14/python-thread-sync/","excerpt":"","text":"前言Python的代码的执行是由Python虚拟机（又名解释器主循环）进行控制的。Python在设计时就是这样考虑的，在主循环中同时只能有一个控制线程在执行，就像单核CPU系统中的多进程一样。内存中可以有许多程序，但是在任意给定时刻只能有一个程序在运行。同理，尽管Python解释器中可以运行多个线程，但是在任意给定时刻只有一个线程会被解释器执行。对Python虚拟机的访问是由全局解释锁（GIL）控制的。这个锁就是用来保证同时只能有一个线程运行的。在多线程环境中，Python虚拟机将按下面所述的方式执行。 设置GIL。 切换进一个线程去运行。 执行下面操作之一。 指定数量的字节码指令 线程主动让出控制权 把线程设置回睡眠状态 解锁GIL 重复上述步骤 在讨论普通的GIL之前，有一点要强调的是GIL只会影响到那些严重依赖CPU的程序（比如计算型的）。 如果你的程序大部分只会设计到I/O，比如网络交互，那么使用多线程就很合适， 因为它们大部分时间都在等待。对于CPU依赖型的程序，你要搞清楚计算的特点。把性能瓶颈优化到关键的部分，如对数组的操作用NumPy这样的模块就非常的高效。 theading模块是最常用的多线程模块,老的thread模块就不用看了 有Thread、Lock、Rock、Condition、Event、Semaphore、BoundedSemphore、Timer、Barrier等一系列可用对象 Thread对象基本代码1234567# 建立对象t = threading.Thread(target = function, args = (arg1,arg2))# 一般来说，Thread线程对象建立之后，不是马上启动的，是用start方法启动t.start()# 加入主线程，如果不加入，在主线程退出后仍然运行。join()方法只有在你需要等待线程完成的时候才是有用的# join如果不被调用 ，将会一直被运行t.join() Thread启动后不能用ctrl+c手动终止的解决方法这里引用别人描述 爬虫作为子线程运行时不受键盘中断信号影响，Ctrl-C无法终止整个爬虫运行。另外的一个场景是多线程压力测试，需要提前终止的情况下，Ctrl-C依旧不能终止整个程序。除了简单粗暴的使用kill命令强行终止之外，本文将给出一个简单可行的解决方案。可能,python2 和python3对于异常的处理逻辑不一致，2中所有的异常在主线程真正退出时才被捕获。","categories":[{"name":"python","slug":"python","permalink":"http://leoatchina.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://leoatchina.github.io/tags/python/"},{"name":"thread","slug":"thread","permalink":"http://leoatchina.github.io/tags/thread/"}]},{"title":"sslocal+proxychains4解决阿里云vps访问github过慢问题","slug":"sslocal-proxychains-aliyun-github","date":"2017-02-14T06:58:08.494Z","updated":"2017-02-15T04:52:00.237Z","comments":true,"path":"2017/02/14/sslocal-proxychains-aliyun-github/","link":"","permalink":"http://leoatchina.github.io/2017/02/14/sslocal-proxychains-aliyun-github/","excerpt":"","text":"阿里云从github clone一些软件后再编译安装 ，速度都很慢。试过改host或者设置 git的proxy，效果都不好，后来用 sslocal+proxychains4解决问题。 1. 安装pip wget -c https://bootstrap.pypa.io/get-pip.pypython get-pip.py 2. 安装 sslocal pip install shadowsocks 3. 配置sslocal vim ~/sslocal.json12345678&#123; &quot;server&quot;:&quot;1.1.1.1&quot;, #可以使用的ss服务器IP &quot;server_port&quot;:1035, #ss服务器端口 &quot;local_address&quot;: &quot;0.0.0.0&quot;, #本地ip 注意：不要使用127.0.0.1或192.168.1.100等ip &quot;local_port&quot;:1080,#本地端口 &quot;password&quot;:&quot;password&quot;,#连接ss服务器密码 &quot;timeout&quot;:600,#等待超时 &quot;method&quot;:&quot;rc4-md5&quot;#加密方式 4. 启动sslocal，并加入开机启动 nohup sslocal -c ~/sslocal .json &gt;/dev/null 2&gt;&amp;1 &amp;echo “ nohup sslocal -c ~/sslocal .json &gt;/dev/null 2&gt;&amp;1 &amp;” &gt;/etc/rc.local 5. 编译安装最新版 proxychains4 wget -c https://github.com/rofl0r/proxychains-ng/releases/download/v4.11/proxychains-ng-5.11.tar.bz2otar zxf proxychains-ng-4.11.tar.bz2cd proxychains-ng-4.11./configure &amp;&amp; make &amp;&amp; make install &amp;&amp; make install-config 6. 编辑proxychains4配置文件 vim /usr/local/etc/proxychains.conf更改 socks4 127.0.0.1 9050为socks5 127.0.0.1 1080 7. 测试下你的代理 proxychains4 curl https://api.ipify.org/?format=json 如果配置正确，返回你的ss服务器的ip地址 8. 用proxychain4+git下载 proxychains4 git clone https://github.com/xxxxx/xxxxx.git 下面是我的一个测试结果，速度从4k提升到了1.5m123456789[proxychains] DLL init: proxychains-ng 4.11[proxychains] Strict chain ... 127.0.0.1:1080 ... github.com:443 ... OK[proxychains] DLL init: proxychains-ng 4.11[proxychains] Strict chain ... 127.0.0.1:1080 ... github.com:443 ... OKremote: Counting objects: 120391, done.[proxychains] DLL init: proxychains-ng 4.11remote: Total 120391 (delta 0), reused 0 (delta 0), pack-reused 120390Receiving objects: 100% (120391/120391), 84.22 MiB | 1.51 MiB/s, done.Resolving deltas: 100% (81308/81308), done.","categories":[{"name":"翻墙","slug":"翻墙","permalink":"http://leoatchina.github.io/categories/翻墙/"}],"tags":[{"name":"sslocal","slug":"sslocal","permalink":"http://leoatchina.github.io/tags/sslocal/"},{"name":"gfwlist","slug":"gfwlist","permalink":"http://leoatchina.github.io/tags/gfwlist/"},{"name":"proxychains4","slug":"proxychains4","permalink":"http://leoatchina.github.io/tags/proxychains4/"},{"name":"aliyun","slug":"aliyun","permalink":"http://leoatchina.github.io/tags/aliyun/"},{"name":"github","slug":"github","permalink":"http://leoatchina.github.io/tags/github/"}]},{"title":"安装新版htslib、bcftools、samtools","slug":"install_samtools_etc","date":"2017-02-14T06:37:32.494Z","updated":"2017-02-14T07:07:27.959Z","comments":true,"path":"2017/02/14/install_samtools_etc/","link":"","permalink":"http://leoatchina.github.io/2017/02/14/install_samtools_etc/","excerpt":"","text":"官方网站和github上的INSTALL/README有问题，要按照下面的方法安装develop版本的12345git clone --branch=develop git://github.com/samtools/htslib.gitgit clone --branch=develop git://github.com/samtools/bcftools.gitgit clone --branch=develop git://github.com/samtools/samtools.gitcd bcftools &amp;&amp; make &amp;&amp; make installcd ../samtools &amp;&amp; make &amp;&amp; make install","categories":[],"tags":[]},{"title":"leoatchina的第一篇hexo博客","slug":"hello-world","date":"2017-01-29T01:58:44.881Z","updated":"2017-02-15T10:24:10.356Z","comments":true,"path":"2017/01/29/hello-world/","link":"","permalink":"http://leoatchina.github.io/2017/01/29/hello-world/","excerpt":"","text":"leoatchina第一次用hexo进行博客写作，使用了next主题leoatchina是用atom进行博客写作，可以在官方网站atom.io上下载之所以用这个软件，原因 免费 配置可以用github进行同步 插件丰富,我主要用到的有 markdown-preview-plus markdown-writer markdown-previwe-opener //自动打开markdown preview markdown-scroll-sync //进行markdown写作时，写作区和预览区同步滚动 atom-hexo //hexo命令 vim-mode // 习惯vim的操作模式了 markclip，//这个是利器 见下面 写作时插入图片的方法 首先，在主配置目录的_config.yml里，设置 post_asset_folder: true 按正常的markdown语言进行写作 写作时正常截图，在安装了markclip之后，在文章里直接按ctrl+v,就可以在source/_posts目录下，建立一个和当前编辑的文件同名的文件夹，你的截图文件会自动放入这个文件夹，并在你markdown文件中插入这个图片的链接，如下 hexo clean | hexo g | hexo d，完成布置","categories":[],"tags":[]}]}