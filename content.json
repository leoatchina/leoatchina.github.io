{"meta":{"title":"leoatchina的博客","subtitle":"一个折腾控写字的地方,生信小菜鸟弱弱地打怪升级中。","description":null,"author":"leoatchina","url":"http://leoatchina.github.io"},"pages":[{"title":"分类","date":"2017-02-14T15:12:05.000Z","updated":"2017-02-14T07:20:53.000Z","comments":true,"path":"categories/index.html","permalink":"http://leoatchina.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2017-02-14T15:17:05.000Z","updated":"2017-02-14T07:18:44.000Z","comments":true,"path":"tags/index.html","permalink":"http://leoatchina.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"rpkm-tpm","slug":"rpkm-tpm","date":"2017-10-18T09:38:17.000Z","updated":"2017-10-18T09:43:20.000Z","comments":true,"path":"2017/10/18/rpkm-tpm/","link":"","permalink":"http://leoatchina.github.io/2017/10/18/rpkm-tpm/","excerpt":"","text":"rpkm-tpm的区别 rpkm是normalize,再divided by count;tmp是先divided by count,再normalize tpm总和是million tpm能表现出某个基因的reads的比例","categories":[],"tags":[]},{"title":"osx_software","slug":"osx-software","date":"2017-10-17T04:13:46.000Z","updated":"2017-10-17T04:18:18.000Z","comments":true,"path":"2017/10/17/osx-software/","link":"","permalink":"http://leoatchina.github.io/2017/10/17/osx-software/","excerpt":"","text":"Mac下的推荐软件spotlight这个不是第三方软件,是系统自带了,默认ctrl+space启动,相当一个快速启动+搜索利器比如你要启动终端,那么按ctrl+space后,再输入termina....就会看到出来 Iterm2 &amp;&amp; oh-my-zsh见安装iterm2和oh-my-zshIterm2代替系统的终端,比原生的好太多。oh-my-zsh是一个zshshell的主题,这两个结合起来届面友好度大大提升 顺带安装homebrew karabiner定义鼠标、按键功能，官方网站参照使用 Karabiner 替代 Scroll Reverser 设置鼠标滚动方向反转来设置鼠标反转 aria2gui下载利器，配合baiduexporter可以破百度云限速aria2guibaiduExporter atom和vscode现在基本能代替sublime了，免费，看情况装其中，装好插件后，Atom能作为一个很强的 markdown写作利器 PDF Expert阅读pdf的利器 Dash程序员百科全书,和alfred结合非常好 Moom类似windows下win键+方向键移动窗口的软件 Pasta加强版的剪贴本 Alfred超级软件 ，加强版的spotlight，内置增强的剪贴本工具，不喜欢安装太多软件的可以用内置的代替上面的paste spf13-vim-leoatchina我修改的vim配置 spf13-vim-leoatchina,看文档","categories":[],"tags":[{"name":"vim","slug":"vim","permalink":"http://leoatchina.github.io/tags/vim/"},{"name":"mac","slug":"mac","permalink":"http://leoatchina.github.io/tags/mac/"},{"name":"osx","slug":"osx","permalink":"http://leoatchina.github.io/tags/osx/"},{"name":"iterm","slug":"iterm","permalink":"http://leoatchina.github.io/tags/iterm/"},{"name":"karabiner","slug":"karabiner","permalink":"http://leoatchina.github.io/tags/karabiner/"}]},{"title":"leoatchina的vim配置文件","slug":"leoatchin-vimrc-forked-from-spf13","date":"2017-10-15T07:04:48.000Z","updated":"2017-10-15T07:16:42.000Z","comments":true,"path":"2017/10/15/leoatchin-vimrc-forked-from-spf13/","link":"","permalink":"http://leoatchina.github.io/2017/10/15/leoatchin-vimrc-forked-from-spf13/","excerpt":"","text":"leoatchina的vim配置文件This is leoatchina’s vim config forked from spf13-vim:steve francia’s vim distribution.I sincerely thank him for great job. To meet my needs,I have changed lots of settings and plugins. __ _ _____ _ ___ _ __ / _/ |___ / __ __(_)_ __ ___ / __| &apos;_ \\| |_| | |_ \\ _____\\ \\ / /| | &apos;_ ` _ \\ \\__ \\ |_) | _| |___) |_____|\\ V / | | | | | | | |___/ .__/|_| |_|____/ \\_/ |_|_| |_| |_| |_| spf13对他自己作品的介绍 spf13-vim is a distribution of vim plugins and resources for Vim, Gvim and MacVim.It is a good starting point for anyone intending to use VIM for development running equally well on Windows, Linux, *nix and Mac.The distribution is completely customisable using a ~/.vimrc.local, ~/.vimrc.bundles.local, and ~/.vimrc.before.local Vim RC files. 背景本人是生信工程师,主要使用的语文是python,R,perl,shell,经常要ssh到远程服务器上写代码,因此学习了vim,后来发现了spf13-vim:steve francia’s vim distribution,大大提高了写代码的效率。但是,原配置仍然有很多插件和配置不符合我的需要,因此,fork后进行了大量的修改.请访问leoatchina的vim配置文件.由于本人水平所限,一定有很多错误和bug,望各位指正.注意使本配置文件后可能会影响vim运行流畅度. 对使用者的要求掌握vim的大部分操作,了解leader,map,hjkl,d,w,s,i,u,:,\\等操作命令 配置文件各配置文件执行次序 .vimrc.before # 参数配置文件 .vimrc.before.local .vimrc.bundles # 插件管理文件 .vimrc.bundles.local .vimrc # 最主要的配置文件,配色、快捷键、显示方式等参数都在这里设置 .vimrc.local 安装安装本配置 需要 Git 1.7+ 和 Vim 7.3+（编译时加入对lua和python的支持），部分插件如Nvim-R,AsyncRun,需要Vim8.0如果要安装neocomplete, 需要vim with lua. Linux, *nix, Mac OSX 下的安装123git clone https://github.com/leoatchina/spf13-vim-leoatchina.gitcd spf13-vim-leoatchinabash bootstrap.sh windows下的安装123git clone https://github.com/leoatchina/spf13-vim-leoatchina.gitcd spf13-vim-leoatchina点击install.cmd 升级到最新版本12vim +BundleUpdate或者在vim里直接 :BundleUpdate 一些功能 复制内容直接放到系统剪贴本 显示行号,多种语法高亮 修改文档后马上生效 Visual模式下用&gt;,&lt;移动文字不会取消选择 不生成backup文件 关闭拼写检查 关闭声音 关闭列光标加亮 关闭行光标加亮 允许折行 不代码折叠 开启实时搜索功能 显示光标当前位置 高亮显示搜索结果 折叠模式下翻页的改进 智能缩进 没有滚动条 没有菜单和工具条 总是显示状态栏 主要改动我在spf13的基础上，做了一些微小的工作 去除了一些比较冗余的插件，如wildfire，并加入了自己喜欢的插件 修改了安装代码，变成直接从clone的目录中软链接到用户目录下，不再支持XP 按自己习惯修改了大量插件的快捷键 去除了原来定义的一些函数 重点修改了代码补全插件YouCompleteMe、Neocomplete的配置和快捷键 去除了fork功能，仅保留before功能 增加对R和Markdown的支持,不过要在~/.vimrc.before.local里开启 默认不进行代码补全，要使用者在 ~/.vimrc.before.local里进行配置,如我加入了对youcompletme的配置,也可以使用neocomplte和neocomplcache 我的~/.vimrc.before.local,可以看到有对python,R,markdown的支持1let g:spf13_bundle_groups=[&apos;general&apos;, &apos;programming&apos;, &apos;python&apos;, &apos;youcompleteme&apos;,&apos;php&apos;, &apos;javascript&apos;, &apos;html&apos;,&apos;R&apos;,&apos;markdown&apos;,&apos;material&apos;] 基本快捷键 &lt;leader&gt;键改为空格键,这个在键盘上最大的按键就有了更强的作用;&lt;localleader&gt;改为\\,\\在R编写调试时使用率比较高 ~作为进入ex模式的快捷键,Q键map为&lt;Nop&gt; F1: 为:h，方便启动帮助 F2: 打开关闭代码折叠 或 &lt;leader&gt;wd F3: 打开关闭换行 或 &lt;leader&gt;fd F4: 打开关闭搜索高亮 或 &lt;leader&gt;hl F5: 运行脚本（python、perl、c等）或 &lt;leader&gt;R;Shift+F5:运行脚本并记录时间;&lt;leader&gt;+F5: AsyncRun F11: 全屏切换,如果是windows下的gvim,要把本目录下的gvim_fullscreen.dll放到gvim的安装目录下 F12: 切换paste模式,或者&lt;leader&gt;tg &lt;leader&gt;fc:fixed confict markers &lt;leader&gt;fw:对当前光标下文字进行搜索 &lt;leader&gt;mk:markdown调用chrome生成markdown preview 在Visual模式下按.为退出Visual模式 标签页控制 1234567891011nnoremap &lt;silent&gt;- : tabprevious&lt;CR&gt;nnoremap &lt;silent&gt;= : tabnext&lt;CR&gt;nnoremap &lt;leader&gt;tf : tabfirst&lt;CR&gt;nnoremap &lt;Leader&gt;tl : tablast&lt;CR&gt;nnoremap &lt;leader&gt;tn : tabnew&lt;CR&gt;nnoremap &lt;Leader&gt;ts : tabs&lt;CR&gt;nnoremap &lt;Leader&gt;tp : tab split&lt;CR&gt;nnoremap &lt;Leader&gt;te : tabe&lt;SPACE&gt;nnoremap &lt;Leader&gt;tm : tabm&lt;SPACE&gt;nnoremap &lt;silent&gt;_ : tabm -1&lt;CR&gt;nnoremap &lt;silent&gt;+ : tabm +1&lt;CR&gt; Ctrl+e移到一行的结尾;Ctrl+y移到一行的开头 Ctrl+m括号之间跳转 &lt;leader&gt;w保存当前文件;&lt;leader&gt;W保存所有文件 &lt;leader&gt;q关闭当然文件;Q为:qa,不过给你反悔的机会不直接按下回车 复制粘贴等 123456789101112&quot; 设置快捷键将选中文本块复制至系统剪贴板vnoremap &lt;leader&gt;y &quot;+ynnoremap &lt;leader&gt;y &quot;+ynnoremap &lt;leader&gt;Y &quot;+ygnnoremap &lt;leader&gt;yy &quot;+yy&quot; Yank from the cursor to the end of the linennoremap Y y$&quot; p and P for pastennoremap &lt;leader&gt;p &quot;+pnnoremap &lt;leader&gt;P &quot;+Pvnoremap &lt;leader&gt;p &quot;+pvnoremap &lt;leader&gt;P &quot;+P 其他一些快捷键 1234567891011121314151617181920212223242526272829303132333435&quot; buffer switchnnoremap &lt;leader&gt;bn :bn&lt;CR&gt;nnoremap &lt;leader&gt;bp :bp&lt;CR&gt;&quot; 定义快捷键保存当前窗口内容nmap &lt;Leader&gt;w :w&lt;CR&gt;nmap &lt;Leader&gt;W :wq!&lt;CR&gt;&quot; 定义快捷键保存所有窗口内容并退出 vimnmap &lt;Leader&gt;WQ :wa&lt;CR&gt;:q&lt;CR&gt;&quot; 定义快捷键关闭当前窗口nmap &lt;Leader&gt;q :q&lt;CR&gt;&quot; 不做任何保存，直接退出 vimnmap &lt;Leader&gt;Q :qa!&lt;CR&gt;&quot; 设置分割页面nmap &lt;Leader&gt;- :split&lt;Space&gt;nmap &lt;leader&gt;\\ :vsplit&lt;Space&gt;nmap &lt;leader&gt;= &lt;C-W&gt;=&quot;设置垂直高度减增nmap &lt;Leader&gt;&#123; :resize -3&lt;CR&gt;nmap &lt;Leader&gt;&#125; :resize +3&lt;CR&gt;&quot;设置水平宽度减增nmap &lt;Leader&gt;[ :vertical resize -3&lt;CR&gt;nmap &lt;Leader&gt;] :vertical resize +3&lt;CR&gt;&quot;至左方的子窗口nnoremap &lt;Leader&gt;H &lt;C-W&gt;H&quot;至右方的子窗口nnoremap &lt;Leader&gt;L &lt;C-W&gt;L&quot;至上方的子窗口nnoremap &lt;Leader&gt;K &lt;C-W&gt;K&quot;至下方的子窗口nnoremap &lt;Leader&gt;J &lt;C-W&gt;J&quot; Visual shifting (does not exit Visual mode)vnoremap &lt; &lt;gvvnoremap &gt; &gt;gv&quot; Ctrl-m for switch between bracketsmap &lt;C-m&gt; % spf13设计了一系列巧妙的配置变量，在.vimrc.before.local里写入配置变量后，可打开/关闭某些配置如，关闭自动cd到某个目录1echo let g:spf13_no_autochdir = 1 &gt;&gt; ~/.vimrc.before.local 在 ~/.vimrc.before文件里可以看到各个变量详细说明 插件系统强大的插件系统是spf13-vim的突出优点，通过这些插件，将原版的vim的功能作了极大的丰富。让界面更加美观，操作更加方便。在原有的基础上，我加入了很多自己用的插件和对配置文件进行了修改spf13没有选用pathongen作为插件管理器，还是选用经典的vundle 使用的插件内置两套颜色主题tyrannicaltoucan/vim-quantum这是我在mac下的iterm2终端下使用的主题，material配色，配合半透明效果看起来很酷炫。但要求终端支持True Color，如果不支持，效果会惨不忍睹。因此改成手动开启，方法：在~/.vimrc.before.local里的g:spf13_bundle_groups列表里加入material altercation/vim-colors-solarized经典主题，默认开启，给一张官方的图还有三套内置配色方案ir_black,molokai,peaksea,通过:color命令开启 scrooloose/nerdtree在侧边显示当前目录，Toggle快捷键为Ctrl-N或者&lt;leader&gt;nn majutsushi/tagbar显示文档结构，在python,vim里肯定有用，要求在系统里安装ctags用Ctrl+T or &lt;leader&gt;tt切换在测边显示文档结构.在bar窗口里按F1调出帮助窗口 vim-voom/VOoM另一个显示文档结构的插件，和TagBar逻辑不一样，python里肯定有用，其他语言我还没有测试出来。快捷键&lt;leader&gt;vo打开 :Voom命令;&lt;leader&gt;vt为:VoomTogglevoom状态切换 mbbill/undotreeundotree顾名思义,增强版的回退插件，快捷键&lt;leader&gt;u airline漂亮的状态栏,能够显示很多状态。 ywvim中文输入法ywvim中文输入法,直接在vim里内置,无意中发现要和fcitx配合使用否则会有bug,在insert模式下通过CTRL+@或CTRL+\\开启,CTRL+^进行配置.;临时英文输入法;注意,默认只输入英文状态的标点,而且首选是五笔;z临时拼音;,.-=上下翻页; markdown默认开户对markdown语言的高亮支持,如.vimrc.before.local里指定markdown支持,按&lt;leadr&gt;mk调用chrome打开markdown预览,不过这个功能还要仔细测试过. fugitive对git的支持,具体可以看官方说明,不过我就设置了快捷键&lt;leader&gt;gi :Git&lt;Space&gt;,操作体验接近终端下输入git命令 scrooloose/nerdcommenter注释插件,神器,直接上官方的快捷键,最常用的是&lt;leader&gt;c&lt;space&gt; [count]&lt;leader&gt;cc |NERDComComment|Comment out the current line or text selected in visual mode. [count]&lt;leader&gt;cn |NERDComNestedComment|Same as cc but forces nesting. [count]&lt;leader&gt;c&lt;space&gt; |NERDComToggleComment|Toggles the comment state of the selected line(s). If the topmost selected line is commented, all selected lines are uncommented and vice versa. [count]&lt;leader&gt;cm |NERDComMinimalComment|Comments the given lines using only one set of multipart delimiters. [count]&lt;leader&gt;ci |NERDComInvertComment|Toggles the comment state of the selected line(s) individually. [count]&lt;leader&gt;cs |NERDComSexyComment|Comments out the selected lines with a pretty block formatted layout. [count]&lt;leader&gt;cy |NERDComYankComment|Same as cc except that the commented line(s) are yanked first. &lt;leader&gt;c$ |NERDComEOLComment|Comments the current line from the cursor to the end of line. &lt;leader&gt;cA |NERDComAppendComment|Adds comment delimiters to the end of line and goes into insert mode between them. |NERDComInsertComment|Adds comment delimiters at the current cursor position and inserts between. Disabled by default. &lt;leader&gt;ca |NERDComAltDelim|Switches to the alternative set of delimiters. [count]&lt;leader&gt;cl[count]&lt;leader&gt;cb |NERDComAlignedComment|Same as |NERDComComment| except that the delimiters are aligned down the left side (&lt;leader&gt;cl) or both sides (&lt;leader&gt;cb). [count]&lt;leader&gt;cu |NERDComUncommentLine|Uncomments the selected line(s). rking/ag.vim Ag是一个非常快的文件/文本搜索工具,通过&lt;leader&gt;ag开遍文本搜索,&lt;leader&gt;af文件搜索 Tabularize自动按特定的符号对齐,快捷键见.vimrc里的配置文件 12345678910111213141516nmap &lt;Leader&gt;a&amp; :Tabularize /&amp;&lt;CR&gt;vmap &lt;Leader&gt;a&amp; :Tabularize /&amp;&lt;CR&gt;nmap &lt;Leader&gt;a= :Tabularize /^[^=]*\\zs=&lt;CR&gt;vmap &lt;Leader&gt;a= :Tabularize /^[^=]*\\zs=&lt;CR&gt;nmap &lt;Leader&gt;a=&gt; :Tabularize /=&gt;&lt;CR&gt;vmap &lt;Leader&gt;a=&gt; :Tabularize /=&gt;&lt;CR&gt;nmap &lt;Leader&gt;a: :Tabularize /:&lt;CR&gt;vmap &lt;Leader&gt;a: :Tabularize /:&lt;CR&gt;nmap &lt;Leader&gt;a:: :Tabularize /:\\zs&lt;CR&gt;vmap &lt;Leader&gt;a:: :Tabularize /:\\zs&lt;CR&gt;nmap &lt;Leader&gt;a, :Tabularize /,&lt;CR&gt;vmap &lt;Leader&gt;a, :Tabularize /,&lt;CR&gt;nmap &lt;Leader&gt;a,, :Tabularize /,\\zs&lt;CR&gt;vmap &lt;Leader&gt;a,, :Tabularize /,\\zs&lt;CR&gt;nmap &lt;Leader&gt;a&lt;Bar&gt; :Tabularize /&lt;Bar&gt;&lt;CR&gt;vmap &lt;Leader&gt;a&lt;Bar&gt; :Tabularize /&lt;Bar&gt;&lt;CR&gt; sessionmansessionmanager,&lt;leader&gt;sl显示session列表;&lt;leader&gt;ss保存session;&lt;leader&gt;sc关闭session ctrlp杀手级插件,引用网上的一段话对它的介绍 在 VIM 世界里，有人是分窗口编辑文件的忠实拥护者，有人则是多文件 tab 页的死忠骨灰粉。但无论哪种人， 在一些大项目内进行编辑工作时，如果要快速打开 ‘./lib/foo/bar/comm/base_utils.py’ 这类藏在大山深处的文件，都需像剥粽子一样，一层一层往下找，让人头疼。 ctrlp.vim 则完美帮你解决了这个痛点，当你想打开某个文件时，只要按下 Ctrl + p 快捷键，输入文件名。 所有和这个文件名匹配的文件都会被按照优先级列出来，按下 enter 或者 Ctrl + t 就可以在当前 buffer 或者新 tab 页打开你要的文件了。 网上找来的图 ctrl+p启动插件,&lt;leader&gt;fu启动funksky函数查询功能,在启动后,用Ctrl+f,Ctrl+b在不同模式中切换.在文件列表中,Ctrl+k/j或者方向键向上/下选择文件,t在新标签里打开文件.其他快捷键见ctrlp中文介绍 Pymodepython用的插件,具有语法检查,调试等功能.F9: python语法检查,S+F9切换语法是否检查.&lt;leader&gt;R:运行脚本;&lt;leader&gt;T:track_point toggle surround给一段文字加上括号的插件，下面说明文字引用自vim中的杀手级别的插件：surround12345678Old text Command New text&quot;Hello *world!&quot; ds&quot; Hello world![123+4*56]/2 cs]) (123+456)/2&quot;Look ma, I&apos;m *HTML!&quot; cs&quot;&lt;q&gt; &lt;q&gt;Look ma, I&apos;m HTML!&lt;/q&gt;if *x&gt;3 &#123; ysW( if ( x&gt;3 ) &#123;my $str = *whee!; vlllls&apos; my $str = &apos;whee!&apos;;&lt;div&gt;Yo!*&lt;/div&gt; dst Yo!&lt;div&gt;Yo!*&lt;/div&gt; cst&lt;p&gt; &lt;p&gt;Yo!&lt;/p&gt; 如上面代码块所示，添加替换时使用后半括号)]}，添加的括号和内容间就没有空格（如第2个示例），反之会在内容前后添加一个空格（如第4个实例）。第6个示例中的t代表一对HTML或者xml tag。其他表示范围的符号：w代表word, W代表WORD(被空格分开的连续的字符窜），p代表paragraph。 命令列表12345678910111213141516171819Normal mode-----------ds - delete a surroundingcs - change a surroundingys - add a surroundingyS - add a surrounding and place the surrounded text on a new line + indent ityss - add a surrounding to the whole lineySs - add a surrounding to the whole line, place it on a new line + indent itySS - same as ySsVisual mode-----------s - in visual mode, add a surroundingS - in visual mode, add a surrounding but place text on new line + indent itInsert mode &quot;不建议使用-----------&lt;CTRL-s&gt; - in insert mode, add a surrounding&lt;CTRL-s&gt;&lt;CTRL-s&gt; - in insert mode, add a new line + surrounding + indent&lt;CTRL-g&gt;s - same as &lt;CTRL-s&gt;&lt;CTRL-g&gt;S - same as &lt;CTRL-s&gt;&lt;CTRL-s&gt; PIVThe most feature complete and up to date PHP Integration for Vim with proper support for PHP 5.3+ including latest syntax, functions, better fold support, etc. PIV provides: PHP 5.3 support Auto generation of PHP Doc (,pd on (function, variable, class) definition line) Autocomplete of classes, functions, variables, constants and language keywords Better indenting Full PHP documentation manual (hit K on any function for full docs) Nvim-R支持R语言的插件,需要Vim8.0+并在.vimrc.before.local里加入R.通过&lt;leader&gt;rr激活界面,&lt;leader&gt;rq退出R程序快捷键极多,请自行:h nvim-r查询 EasyMotion 又一个杀手级别的插件 跳转到当前光标前后,快捷键&lt;leader&gt;&lt;leader&gt;w和&lt;leader&gt;&lt;leader&gt;b 搜索跳转,&lt;leader&gt;&lt;leader&gt;s,然后输入要搜索的字母 行间/行内级别跳转,&lt;leader&gt;&lt;leader&gt;再hjkl不解释 重复上一次的动作,&lt;leader&gt;&lt;leader&gt;. 还可以&lt;leader&gt;&lt;leader&gt;f和&lt;leader&gt;&lt;leader&gt;t,不过不建议使用 代码补全插件 用了三种补全插件，要在~/.vimrc.before.local里加入youcomplteme或neocomplte或neocomplcache来激活安装。 基本快捷键统一为Tab、Shift-Tab为向下，向上翻页，ctrl-n/p也能进行翻页.enter或Ctrl+k激活补全。ctrl+l显示各种实例可能YouComplteMe 需要安装一系列编译用软件 跳转键，Ctrl+f跳转到下一个待补全处，Ctrl+b中转到上一个待补全处。 \b具体可参考Vim 自动补全插件 YouCompleteMe 安装与配置. 在安装好各种编译用的工具后12cd ~/.vim/bundle/YouCompleteMepython2 install.py #可能仅支持python等不需要编译的语言 neocomplete&amp;&amp;neocomplcache 这两者是同一个作者\b编写，neocomplte需要lua的支持","categories":[],"tags":[{"name":"vim","slug":"vim","permalink":"http://leoatchina.github.io/tags/vim/"},{"name":"spf13","slug":"spf13","permalink":"http://leoatchina.github.io/tags/spf13/"}]},{"title":"leoatchina的第一篇hexo博客","slug":"hello-world","date":"2017-08-26T00:15:47.000Z","updated":"2017-02-15T10:24:10.000Z","comments":true,"path":"2017/08/26/hello-world/","link":"","permalink":"http://leoatchina.github.io/2017/08/26/hello-world/","excerpt":"","text":"leoatchina第一次用hexo进行博客写作，使用了next主题leoatchina是用atom进行博客写作，可以在官方网站atom.io上下载之所以用这个软件，原因 免费 配置可以用github进行同步 插件丰富,我主要用到的有 markdown-preview-plus markdown-writer markdown-previwe-opener //自动打开markdown preview markdown-scroll-sync //进行markdown写作时，写作区和预览区同步滚动 atom-hexo //hexo命令 vim-mode // 习惯vim的操作模式了 markclip，//这个是利器 见下面 写作时插入图片的方法 首先，在主配置目录的_config.yml里，设置 post_asset_folder: true 按正常的markdown语言进行写作 写作时正常截图，在安装了markclip之后，在文章里直接按ctrl+v,就可以在source/_posts目录下，建立一个和当前编辑的文件同名的文件夹，你的截图文件会自动放入这个文件夹，并在你markdown文件中插入这个图片的链接，如下 hexo clean | hexo g | hexo d，完成布置","categories":[],"tags":[]},{"title":"安装新版htslib、bcftools、samtools","slug":"install_samtools_etc","date":"2017-08-26T00:15:47.000Z","updated":"2017-02-14T07:07:27.000Z","comments":true,"path":"2017/08/26/install_samtools_etc/","link":"","permalink":"http://leoatchina.github.io/2017/08/26/install_samtools_etc/","excerpt":"","text":"官方网站和github上的INSTALL/README有问题，要按照下面的方法安装develop版本的12345git clone --branch=develop git://github.com/samtools/htslib.gitgit clone --branch=develop git://github.com/samtools/bcftools.gitgit clone --branch=develop git://github.com/samtools/samtools.gitcd bcftools &amp;&amp; make &amp;&amp; make installcd ../samtools &amp;&amp; make &amp;&amp; make install","categories":[],"tags":[]},{"title":"sslocal+proxychains4解决阿里云vps访问github过慢问题","slug":"sslocal-proxychains-aliyun-github","date":"2017-08-26T00:15:47.000Z","updated":"2017-02-15T04:52:00.000Z","comments":true,"path":"2017/08/26/sslocal-proxychains-aliyun-github/","link":"","permalink":"http://leoatchina.github.io/2017/08/26/sslocal-proxychains-aliyun-github/","excerpt":"","text":"阿里云从github clone一些软件后再编译安装 ，速度都很慢。试过改host或者设置 git的proxy，效果都不好，后来用 sslocal+proxychains4解决问题。 1. 安装pip wget -c https://bootstrap.pypa.io/get-pip.pypython get-pip.py 2. 安装 sslocal pip install shadowsocks 3. 配置sslocal vim ~/sslocal.json12345678&#123; &quot;server&quot;:&quot;1.1.1.1&quot;, #可以使用的ss服务器IP &quot;server_port&quot;:1035, #ss服务器端口 &quot;local_address&quot;: &quot;0.0.0.0&quot;, #本地ip 注意：不要使用127.0.0.1或192.168.1.100等ip &quot;local_port&quot;:1080,#本地端口 &quot;password&quot;:&quot;password&quot;,#连接ss服务器密码 &quot;timeout&quot;:600,#等待超时 &quot;method&quot;:&quot;rc4-md5&quot;#加密方式 4. 启动sslocal，并加入开机启动 nohup sslocal -c ~/sslocal .json &gt;/dev/null 2&gt;&amp;1 &amp;echo “ nohup sslocal -c ~/sslocal .json &gt;/dev/null 2&gt;&amp;1 &amp;” &gt;/etc/rc.local 5. 编译安装最新版 proxychains4 wget -c https://github.com/rofl0r/proxychains-ng/releases/download/v4.11/proxychains-ng-5.11.tar.bz2otar zxf proxychains-ng-4.11.tar.bz2cd proxychains-ng-4.11./configure &amp;&amp; make &amp;&amp; make install &amp;&amp; make install-config 6. 编辑proxychains4配置文件 vim /usr/local/etc/proxychains.conf更改 socks4 127.0.0.1 9050为socks5 127.0.0.1 1080 7. 测试下你的代理 proxychains4 curl https://api.ipify.org/?format=json 如果配置正确，返回你的ss服务器的ip地址 8. 用proxychain4+git下载 proxychains4 git clone https://github.com/xxxxx/xxxxx.git 下面是我的一个测试结果，速度从4k提升到了1.5m123456789[proxychains] DLL init: proxychains-ng 4.11[proxychains] Strict chain ... 127.0.0.1:1080 ... github.com:443 ... OK[proxychains] DLL init: proxychains-ng 4.11[proxychains] Strict chain ... 127.0.0.1:1080 ... github.com:443 ... OKremote: Counting objects: 120391, done.[proxychains] DLL init: proxychains-ng 4.11remote: Total 120391 (delta 0), reused 0 (delta 0), pack-reused 120390Receiving objects: 100% (120391/120391), 84.22 MiB | 1.51 MiB/s, done.Resolving deltas: 100% (81308/81308), done.","categories":[{"name":"翻墙","slug":"翻墙","permalink":"http://leoatchina.github.io/categories/翻墙/"}],"tags":[{"name":"github","slug":"github","permalink":"http://leoatchina.github.io/tags/github/"},{"name":"sslocal","slug":"sslocal","permalink":"http://leoatchina.github.io/tags/sslocal/"},{"name":"gfwlist","slug":"gfwlist","permalink":"http://leoatchina.github.io/tags/gfwlist/"},{"name":"proxychains4","slug":"proxychains4","permalink":"http://leoatchina.github.io/tags/proxychains4/"},{"name":"aliyun","slug":"aliyun","permalink":"http://leoatchina.github.io/tags/aliyun/"}]},{"title":"一个缩写，让你的git log命令界面更加直观和酷炫","slug":"git-abbreviate-gitlg","date":"2017-03-19T08:59:26.000Z","updated":"2017-04-22T06:12:23.000Z","comments":true,"path":"2017/03/19/git-abbreviate-gitlg/","link":"","permalink":"http://leoatchina.github.io/2017/03/19/git-abbreviate-gitlg/","excerpt":"","text":"转自微信公众号，AndroidDevelper 告诉大家一个比较屌的命令，输入1git log --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit --date=relative 然后日志这样了 是不是比较清晰，整个分支的走向也很明确，但是每次都要输这么一大串是不是也很烦？这时候你就该想到 alias 啊。 这样以后直接输入 git lg 就行了。 1git config --global alias.lg &quot;log --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit --date=relative&quot; 还有其他常用的缩写12345git config --global alias.st statusgit config --global alias.co checkoutgit config --global alias.ci commitgit config --global alias.cim &apos;commit -m&apos;git config --global alias.br branch","categories":[],"tags":[{"name":"git","slug":"git","permalink":"http://leoatchina.github.io/tags/git/"}]},{"title":"ubuntu服务器samba、ftp、timemachine配置过程","slug":"ubuntu-samba-ftp-timemachine-config","date":"2017-03-05T10:41:35.000Z","updated":"2017-03-05T03:48:12.000Z","comments":true,"path":"2017/03/05/ubuntu-samba-ftp-timemachine-config/","link":"","permalink":"http://leoatchina.github.io/2017/03/05/ubuntu-samba-ftp-timemachine-config/","excerpt":"","text":"作为家里htpc服务器的ubuntu电脑由于前面操作不慎，系统出了一些非常影响检验的总是，特别是owncloud功能挂了，最后决定重装。重装后先把最重要的 samba，ftp，timemachine功能给恢复回来，其他以后慢慢搞。在这过程中，又重新看了以前的笔记，查了一些资料，在实践中发现无论原来的笔记，人家的经验都有一些繁琐，或不是非常正确的地方， 这里记录下自己的配置备参考 。 电脑硬盘和目录有一个ssd和一个hdd，hdd mount成 /mnt/。这里有一个非常容易忽视的设置，要把 /mnt/和其子目录设置成 samba帐号 可读写和执行，否则samba服务会报权限错误1sudo chmod 770 -R /mnt 我的/mnt下面的文件夹分配1234567891011# htpc @ htpc in /mnt [10:48:35]$ ls -alhtotal 36Kdrwxrwxrwx 8 htpc htpc 4.0K 3月 4 22:30 .drwxr-xr-x 24 root root 4.0K 3月 4 10:39 ..drwxrwx--- 4 htpc htpc 4.0K 3月 4 09:39 backupdrwxrwx--- 5 htpc htpc 4.0K 3月 4 11:16 configdr-xr-x--- 5 share htpc 4.0K 3月 4 22:31 ftp # ftp主目录drwxrwx--- 4 www-data htpc 4.0K 2月 21 22:02 owncloud # owncloud目录drwxrwx--- 10 share htpc 4.0K 3月 4 22:43 share # 这个是samba的drwxrwx--- 8 tm htpc 4.0K 3月 5 10:48 timemachine # mac用的timemachine目录 其中， share目录通过修改 /etc/fstab 开机mount到 /mnt/ftp/share中去。在这个文件最后加这样一句1/mnt/share /mnt/ftp/share none bind 0 0 为什么要这么做，是因为vsftp的要求：不能在ftp的根目录可写，所以ftp这个目录的权限也要设置成 550 用户samba和ftp的share帐号1sudo useradd share -d /mnt/ftp -s /usr/sbin/nologin -g htpc 说明下 -d 主目录，为了ftp服务 -s 设置shell为 nologin，就是不能远程登陆 -g 设置成htpc组，这个其实是为了htpc这个主账号登陆上去后管理方便，不是一定要设置 samba安装1sudo apt-get install samba 配置 sudo vim /etc/samba/smb.conf 网上的教程太冗余，我先贴我的1234567891011121314151617181920[global]netbios name = htpc #局域网显示名称server string = Samba Server Version %v workgroup = workgroup #局域网共享分组load printers = nosecurity = user # 这个比较重要，设计成user是根据你linux内帐户权限对共享目录进行访问log level = 8log file = /var/log/samba/samba.logmax log size = 50unix charset = utf8 #这个也比较重要map hidden = no[share]comment = share path = /mnt/share # 路径browseable = yes #这个其实比较重要的，如果设置成no，你的这个目录在共享里是看不到的，除非输入路径writable = yesread only = novalid users = share,@htpc # 允许访问的用户和用户组write list = share,@htpc # 允许写入的用户和用户组 重启服务 sudo service smbd restart 再强调一次，设置samba目录时，要把父目录也设置成share帐户可读入，否则不能访问samba目录 ftp,其实就是vsftp安装 sudo apt-get install vsftpd 配置sudo vim /etc/vsftp还是一句话，网上的配置太麻烦，贴我的,其实就几个地方比较重要12345678910111213141516listen=YESanonymous_enable=NOlocal_enable=YES #用本地帐户登陆write_enable=YESlocal_umask=022local_root=/mnt/ftp # 主目录max_clients=5dirmessage_enable=YESuse_localtime=YESxferlog_enable=YESidle_session_timeout=600data_connection_timeout=120secure_chroot_dir=/var/run/vsftpd/emptypam_service_name=ftprsa_cert_file=/etc/ssl/private/vsftpd.pemchroot_local_user=YES #限制在ftp 主目录内，这也是前面 mount share目录的原因 重启和登陆ftp sudo service vsftpd restart 然后你用 ubuntu share账户就可以登陆了 timemachine这里我必须吐槽一下， 网上找到很多教程，装这个装那个，配这个配那个，其实在最新版的ubuntu下面，avahi服务是自带的，根本不用装，而且一般人要用到的配置也很简单，抄来抄去写那么多干什么。 安装 ，就装这个就行了 sudo apt-get install netatalk 配置，就改最后两行就够了 sudo vim /etc/netatalk/AppleVolumes.default 注释掉 &quot;Home Directory&quot;，加上这么一句 /mnt/timemachine/ &quot;TimeMachine&quot; volsizelimit:600000 options:tm然后呢，最多对 /mnt/timemachine目录设置一个专门帐号，就行了 重启和访问 sudo service netatalk restart 在finder里，按 cmd+k，输入 afp://ip 访问你的TimeMachine服务器，然后你打开timemachine设置选择你的 TimeMachine","categories":[],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://leoatchina.github.io/tags/ubuntu/"},{"name":"samba","slug":"samba","permalink":"http://leoatchina.github.io/tags/samba/"},{"name":"ftp","slug":"ftp","permalink":"http://leoatchina.github.io/tags/ftp/"},{"name":"timemachine","slug":"timemachine","permalink":"http://leoatchina.github.io/tags/timemachine/"}]},{"title":"用ubuntu+owncloud+nginx+php-fpm+mysql+aria2打造私有云+远程下载器","slug":"ubuntu-owncloud-nginx-php-fpm-mysql-aria2-private-storage","date":"2017-03-02T10:14:34.000Z","updated":"2017-03-05T14:44:27.000Z","comments":true,"path":"2017/03/02/ubuntu-owncloud-nginx-php-fpm-mysql-aria2-private-storage/","link":"","permalink":"http://leoatchina.github.io/2017/03/02/ubuntu-owncloud-nginx-php-fpm-mysql-aria2-private-storage/","excerpt":"","text":"起由 由于最近的“净网”行动，很多网盘包括我一直在使用的快盘关停，仍然存活的百度云、360云等又没有linux客户端，用Dropbox等国外网盘受空间和墙的限制比较大。 同时又有一定的收集高清电影在局域网里共享播放的需要。家里是百兆电信宽带，平时空时可以用来下载，所以有了自建以私有云为基础的服务器的想法。 私有云方案有多种方案，出于可扩展功能的需要，选择了Ubuntu14.04+Owncloud的方案，使用者要有一点的linux操作和vi编辑经验。 顺带要把mysql和phpmyadmin也配置好 主机配置 主机放于家庭电视机柜中，24小时开机，乔思伯V3 ITX HTPC机箱 内存2G x 2，系统装在一块64Gssd上，另外有一块4T的硬盘作主力盘 主板集成J1800 CPU，无风扇，TDP 15w，足够放1080p X264编码的高清电影，不过现在建议用更高级的J3455主板，能放4k的高清。 不算硬盘，HTPC的资金投入是 主板250+内存100+机箱200+电源150=700 带端口映射的智能路由器 一般情况下，家庭局域网出口在公网环境下是没有固定ip，所以路由要有动态域名解析功能，能从公网环境中反向通过家庭路由访问到局域网 由于电信封了80和8080端口，同时又要把对路由公网ip的访问转到HTPC上，所以要有端口映射功能 又有其他翻墙、路由分离功能 openwrt是一个比较好的方案，我的方案是淘宝上这一款 841N 五口 OpenWrt 无线路由器 16M 64M 双天线，体积小，拆掉天线后放入弱电箱，无线功能靠二级路由实现，要注意要把二级跟帖的ip段设置的和主路由一样。 现在换成了斐讯k2 请去刷入 padavan系统 开启路由器的端口映射 首先要确定你的机器（下面统称HTPC）的静态IP 在web界面，网络-防火墙-端口转发里，增加以下几条转发到此静态IP的规则 12345621-&gt;21：#For FTP20-&gt;20：#For FTP22-&gt;22：#For SSH remote login 443-&gt;443：#For Https6800-&gt;6800：#For Aria26801-&gt;6801：#For Aria2 你们可以注意到没有规则对80转发或者转发到80端口 开启动态域名 可以在 changeip.com去申请，比如我申请了一个 testdomain.changeip.com，这样在外网环境中结合上述端口映射，可以直接对内网中的HTPC进行操作，安装软件、修改服务。 出人意料的NTFS权限问题 这个是历史遗留问题：曾经我的三块硬盘在放到htpc里时全是ntfs格式，上面都有数据，不能无损转成EXT4 owncloud的存贮路径是在其中一块硬盘上，原来是直接mount到/mnt目录下，在后面配置owncloud时指定存贮目录时，出现权限770问题 数据太多，不能格盘，在owncloud的官方网站上找了好久，找出是mount时出的 用户权限分配问题，后来通过修改 /etc/fstab 指定 mount时的uid等来解决/dev/sdb5 /mnt/disk1 ntfs locale=zh_CN.UTF-8,uid=33,gid=33,dmask=007,windows_names 0 0 上面的uid=33,gid=33分别对应远行nginx的用户 www-data 和用户组 www-data 安装samba和vsftp ssh到HTPC后自行安装，并设置好目录 安装mysql sudo apt-get install mysql-server mysql-client 安装nginx和php-fpm 请给你的mysql设置一个比较强的root密码，并且为owncloud创建专有用户 sudo apt-get install nginxsudo add-apt-repository ppa:ondrej/phpsudo apt-get updatesudo apt-get install php7.0 php-fpm php-mysql php-mbstring 安装phpmyadmin和owncloud 直接从网上下载，解压到web服务目录 我的web服务根目录是 /home/test/www 改变目录拥有者 sudo chown www-data -R /home/test/www 改变权限 sudo chmod 755 -R /home/test/www 配置phpmyadmin 备份原始配置文件 cd /home/test/www/phpmyadmincp config.sample.inc.php config.inc.php 修改phpmyadmin的配置文件 vi /home/test/www/phpmyadmin/config.inc.php配置 $cfg[&#39;blowfish_secret&#39;] = &#39;$#%#$%#$%#$^#^ETETR&#39;; 就是一个加密信息，越乱越好 配置另一个config文件 cd /home/test/www/phpmyadmin/librariesvi config.default.php同样配置$cfg[&#39;blowfish_secret&#39;] 其他用默认 配置php7-fpm php7.0的 配置环境在 /etc/php/7.0/fpm里，有php-fpm.conf和php.ini两个重要的配置文件 php.ini 设置 = On```12345678910111213141516171819202122- ```extension_dir = &quot;/usr/lib/php/20151012&quot;```，目录通过``catfish``搜索``mysql.so``找到，用于安装各种扩展，应该是``apt-get install``时自动放入。- 开启对mysql的支持:``extension=mysqli.so``，``extension=pdo_mysql.so``- 设置``cgi.fix_pathinfo=0``###### **php-fpm.conf:**可以看到 ``include=/etc/php/7.0/fpm/pool.d/*.conf``，里面有``www.conf``文件&gt; - 配置``listen``: ``listen = /run/php/php7.0-fpm.sock``，配置nginx时会用到- 重启php-fpm:``sudo service php7-fpm restart``#### nginx开启https，两种方案owncloud9.0强制要求https服务，需要对自己web站进行认证，实际中我试过两种方案，最后用的是第一种方案##### 用自签名的SSL证书&gt; - 采用自验证方案，借用廖雪峰大神的脚本[给Nginx配置一个自签名的SSL证书](http://www.liaoxuefeng.com/article/0014189023237367e8d42829de24b6eaf893ca47df4fb5e000)&gt; - 运行这个脚本后，把生成的key文件和crt文件复制到``/etc/nginx/ssl/``目录如``/etc/nginx/ssl/testdomain.changeip.com.crt``和``/etc/nginx/ssl/testdomain.changeip.com.key``配置nginx时要用到,或者你直接在后面写nginx文件时指向这两个文件##### 用letsencypt加密自己的服务器&gt; - 被大牛吐槽自授权是错误的价值观，在他的建议下换成 [Let’s Encrypt](https://letsencrypt.org/)（是一个免费、自动化、开放的证书颁发机构，由网络安全研究小组运作）的免费授权系统，主要参考了[Let&apos;s Encrypt SSL证书配置](http://www.jianshu.com/p/eaac0d082ba2)和[折腾Let‘s Encrypt免费SSL证书](https://xiaoai.me/?p=223)- 下载安装 git clone https://github.com/certbot/certbot.gitcd certbot./letsencrypt-auto –help1- 生成密钥，在这之前要**停止nginx** ./letsencrypt-auto certonly -d testdomain.changip.com -m testdomain@gmail.com12345- 这样，会生成/etc/letsencrypt/live/testdomain.changeip.com/fullchain.pem /etc/letsencrypt/live/testdomain.changeip.com/privkey.pem 两个文件，不用移动位置- 生成2048位 DH parameters：```sudo openssl dhparam -out /etc/nginx/ssl/dhparams.pem 2048 美中不足的是，这种方案只有90天的有效期，要到时候运行脚本renew owncloud 前面已经提到了很多owncloud的配置，都为实践中一一摸索得来，主要有 专用mysql用户 https证书 php.ini配置 文件夹权限 端口映射 特别要强调，要把owncloud的数据文件目录的用户改成 www-data，权限也要改770 aria2和yaaw aria2可以apt-get安装或者编译安装，参考网上教程，至少能安装到1.19版本 yaaw下载后直接解压缩到/home/kodi/yaaw下 aria2的教程网上很多，我这里贴出我的配置，放在~/.aria2/aria2.conf里 12345678910111213141516171819202122rpc-secret=secret #token加密方式enable-rpc=truerpc-allow-origin-all=truerpc-listen-all=truerpc-listen-port=6800#nginx里有个转发到这个端口的设置rpc-secure=truerpc-certificate=/etc/letsencrypt/live/testdomain.changeip.com/fullchain.pemrpc-private-key=/etc/letsencrypt/live/testdomain.changeip.com/privkey.pemmax-concurrent-downloads=5continue=truemax-connection-per-server=5min-split-size=10Msplit=10max-overall-download-limit=3Mmax-download-limit=0max-overall-upload-limit=256Kmax-upload-limit=0dir=/mnt/disk2/Downloadsdisk-cache=32Mfile-allocation=preallocinput-file=/home/kodi/.aria2/aria2.sessionsave-session=/home/kodi/.aria2/aria2.session 在配置yaaw是关键一步，在setting后，要把JSON-RPC Path设置成 1https://token:secret@testdomain.changeip.com:6801/jsonrpc #请注意https和6801 nginx配置 这一步配的头大，后来参考了owncloud官方配置文件才写出来 实际使用过程中又进行了不断的调整 你们可以注意到有个对 6801进行ssl加密又转发到6800端口的配置 ，这是为了让yaaw在全站加密的情况下，突破aria2c的server对https的兼容性问题 要解释的东西太多了，有些我还看不懂，以后一一写来123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146upstream php5-handler &#123; server unix:/var/run/php5-fpm.sock;&#125;upstream php7-handler &#123; server unix:/run/php/php7.0-fpm.sock;&#125;server&#123; listen 6801 ssl; server_name testdomain.changeip.com; ssl_certificate /etc/letsencrypt/live/testdomain.changeip.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/testdomain.changeip.com/privkey.pem; ssl_dhparam /etc/nginx/ssl/dhparams.pem; ssl_ciphers &apos;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA&apos;; ssl_prefer_server_ciphers on; location / &#123; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:6800; &#125;&#125;server &#123; listen 443 ssl; server_name testdomain.changeip.com 192.168.10.150; ssl_certificate /etc/letsencrypt/live/testdomain.changeip.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/testdomain.changeip.com/privkey.pem; ssl_dhparam /etc/nginx/ssl/dhparams.pem; ssl_ciphers &apos;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA&apos;; ssl_prefer_server_ciphers on; # Add headers to serve security related headers # Before enabling Strict-Transport-Security headers please read into this topic first. #add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload;&quot;; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options &quot;SAMEORIGIN&quot;; add_header X-XSS-Protection &quot;1; mode=block&quot;; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains; preload&quot;; # Path to the root of your installation root /home/kodi/www/; location = /robots.txt &#123; allow all; log_not_found off; access_log off; &#125; location /luci&#123; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass https://192.168.10.1; &#125; # The following 2 rules are only needed for the user_webfinger app. # Uncomment it if you&apos;re planning to use this app. #rewrite ^/.well-known/host-meta /owncloud/public.php?service=host-meta last; #rewrite ^/.well-known/host-meta.json /owncloud/public.php?service=host-meta-json last; location = /.well-known/carddav &#123; return 301 $scheme://$host/owncloud/remote.php/dav; &#125; location = /.well-known/caldav &#123; return 301 $scheme://$host/owncloud/remote.php/dav; &#125; location /.well-known/acme-challenge &#123; &#125; location ^~ /phpmyadmin&#123; location /phpmyadmin&#123; server_name_in_redirect off; index index.php; &#125; location ~ ^/phpmyadmin/(?:build|tests|config|lib|3rdparty|templates|data)/ &#123; deny all; &#125; location ~ ^/phpmyadmin/(?:\\.|autotest|occ|issue|indie|console) &#123; deny all; &#125; location ~ &quot;^\\/phpmyadmin\\/.*\\.php$&quot; &#123; include fastcgi_params; fastcgi_split_path_info ^(.+\\.php)(/.+)$; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_param HTTPS on; fastcgi_param modHeadersAvailable true; #Avoid sending the security headers twice fastcgi_param front_controller_active true; fastcgi_pass php5-handler; fastcgi_intercept_errors on; # fastcgi_request_buffering off; &#125; location ~ &quot;^\\/phpmyadmin\\/.*\\.\\(htm|html|gif|jpg|png|js|css\\)$&quot; &#123; root /home/kodi/www; &#125; &#125; location ^~ /owncloud &#123; # set max upload size client_max_body_size 51200M; fastcgi_buffers 64 4K; # Disable gzip to avoid the removal of the ETag header gzip off; # Uncomment if your server is build with the ngx_pagespeed module # This module is currently not supported. #pagespeed off; location /owncloud &#123; rewrite ^ /owncloud/index.php$uri; &#125; location ~ ^/owncloud/(?:build|tests|config|lib|3rdparty|templates|data)/ &#123; deny all; &#125; location ~ ^/owncloud/(?:\\.|autotest|occ|issue|indie|db_|console) &#123; deny all; &#125; location ~ ^/owncloud/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\\.php(?:$|/) &#123; include fastcgi_params; fastcgi_split_path_info ^(.+\\.php)(/.+)$; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;Gggg fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_param HTTPS on; fastcgi_param modHeadersAvailable true; #Avoid sending the security headers twice fastcgi_param front_controller_active true; fastcgi_pass php5-handler; fastcgi_intercept_errors on; # fastcgi_request_buffering off; &#125; location ~ ^/owncloud/(?:updater|ocs-provider)(?:$|/) &#123; try_files $uri/ =404; index index.php; &#125; # Adding the cache control header for js and css files # Make sure it is BELOW the PHP block location ~* \\.(?:css|js)$ &#123; try_files $uri /owncloud/index.php$uri$is_args$args; add_header Cache-Control &quot;public, max-age=7200&quot;; # Add headers to serve security related headers (It is intended to have those duplicated to the ones above) # Before enabling Strict-Transport-Security headers please read into this topic first. #add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload;&quot;; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options &quot;SAMEORIGIN&quot;; add_header X-XSS-Protection &quot;1; mode=block&quot;; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; # Optional: Don&apos;t log access to assets access_log off; &#125; location ~* \\.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ &#123; try_files $uri /owncloud/index.php$uri$is_args$args; # Optional: Don&apos;t log access to other assets access_log off; &#125; &#125;&#125;","categories":[],"tags":[{"name":"owncloud","slug":"owncloud","permalink":"http://leoatchina.github.io/tags/owncloud/"},{"name":"ubuntu","slug":"ubuntu","permalink":"http://leoatchina.github.io/tags/ubuntu/"},{"name":"nginix","slug":"nginix","permalink":"http://leoatchina.github.io/tags/nginix/"},{"name":"mysql","slug":"mysql","permalink":"http://leoatchina.github.io/tags/mysql/"},{"name":"aria2","slug":"aria2","permalink":"http://leoatchina.github.io/tags/aria2/"}]},{"title":"linux下 各种解压文件使用方法","slug":"unpress-method-in-linux-with-cmd","date":"2017-03-02T10:04:49.000Z","updated":"2017-03-02T02:17:44.000Z","comments":true,"path":"2017/03/02/unpress-method-in-linux-with-cmd/","link":"","permalink":"http://leoatchina.github.io/2017/03/02/unpress-method-in-linux-with-cmd/","excerpt":"","text":".xz12解包：tar xvf FileName.tar.xz打包：tar cvf FileName.tar DirName .tar 123 解包：tar xvf FileName.tar 打包：tar cvf FileName.tar DirName（注：tar是打包，不是压缩！） .gz123 解压1：gunzip FileName.gz 解压2：gzip -d FileName.gz 压缩：gzip FileName .tar.gz 和 .tgz12 解压：tar zxvf FileName.tar.gz 压缩：tar zcvf FileName.tar.gz DirName .bz2123 解压1：bzip2 -d FileName.bz2 解压2：bunzip2 FileName.bz2 压缩： bzip2 -z FileName .tar.bz212 解压：tar jxvf FileName.tar.bz2 或tar --bzip xvf FileName.tar.bz2 压缩：tar jcvf FileName.tar.bz2 DirName .bz123 解压1：bzip2 -d FileName.bz 解压2：bunzip2 FileName.bz 压缩：未知 .tar.bz12解压：tar jxvf FileName.tar.bz压缩：未知 .Z12 解压：uncompress FileName.Z 压缩：compress FileName .tar.Z12 解压：tar Zxvf FileName.tar.Z 压缩：tar Zcvf FileName.tar.Z DirName .zip123 解压：unzip FileName.zip 压缩：zip FileName.zip DirName 压缩一个目录使用 -r 参数，-r 递归。例： $ zip -r FileName.zip DirName .rar123456 解压：rar x FileName.rar 压缩：rar a FileName.rar DirName rar请到：http://www.rarsoft.com/download.htm 下载！ 解压后请将rar_static拷贝到/usr/bin目录（其他由$PATH环境变量指定的目录也可以）： [root@www2 tmp]# cp rar_static /usr/bin/rar .lha123456 解压：lha -e FileName.lha 压缩：lha -a FileName.lha FileName lha请到：http://www.infor.kanazawa-it.ac.jp/~ishii/lhaunix/下载！ &gt;解压后请将lha拷贝到/usr/bin目录（其他由$PATH环境变量指定的目录也可以）： [root@www2 tmp]# cp lha /usr/bin/ .rpm1 解包：rpm2cpio FileName.rpm | cpio -div .deb1 解包：ar p FileName.deb data.tar.gz | tar zxf - .tar .tgz .tar.gz .tar.Z .tar.bz .tar.bz2 .zip .cpio .rpm .deb .slp .arj .rar .ace .lha .lzh .lzx .lzs .arc .sda .sfx .lnx .zoo .cab .kar .cpt .pit .sit .sea1234567 解压：sEx x FileName.* 压缩：sEx a FileName.* FileName sEx只是调用相关程序，本身并无压缩、解压功能，请注意！ sEx请到： http://sourceforge.net/projects/sex下载！ 解压后请将sEx拷贝到/usr/bin目录（其他由$PATH环境变量指定的目录也可以）： [root@www2 tmp]# cp sEx /usr/bin/ Linux下常见文件解压方法及命令 以.a为扩展名的文件:1tar xv file.a 以.z为扩展名的文件: 1uncompress file.Z 以.gz为扩展名的文件: 1gunzip file.gz 以.bz2为扩展名的文件: 1bunzip2 file.bz2 以.tar.Z为扩展名的文件: 12tar xvZf file.tar.Z或 compress -dc file.tar.Z | tar xvf 以.tar.gz/.tgz为扩展名的文件: 12tar xvzf file.tar.gz或 gzip -dc file.tar.gz | tar xvf - 以.tar.bz2为扩展名的文件: 12tar xvIf file.tar.bz2或 bzip2 -dc file.tar.bz2 | xvf - 8.以.cpio.gz/.cgz为扩展名的文件:1gzip -dc file.cgz | cpio -div 9.以.cpio/cpio为扩展名的文件:12cpio -div file.cpio或cpio -divc file.cpio 10.以.rpm为扩展名的文件安装:1rpm -i file.rpm 11.以.rpm为扩展名的文件解压缩：1rpm2cpio file.rpm | cpio -div 12.以.deb为扩展名的文件安装：1dpkg -i file.deb 13.以.deb为扩展名的文件解压缩:12dpkg-deb -fsys-tarfile file.deb | tar xvf - ar pfile.deb data.tar.gz | tar xvzf - 14.以.zip为扩展名的文件:1unzip file.zip","categories":[],"tags":[]},{"title":"没有X的vps上怎么配置才能复制vim界面里的文字","slug":"copy-vim-words-from-vps-without-x","date":"2017-03-02T10:02:33.000Z","updated":"2017-03-02T02:03:17.000Z","comments":true,"path":"2017/03/02/copy-vim-words-from-vps-without-x/","link":"","permalink":"http://leoatchina.github.io/2017/03/02/copy-vim-words-from-vps-without-x/","excerpt":"","text":"讨论见我在知乎上的提问知乎讨论，没有X的vps上怎么配置才能复制vim界面里的文字？ 环境阿里云，centos，无论是编译还是yum安装vim,在本地都不能在远程的vim上复制文字 在vps上安装 neovim或者vim-X11 并且安装xclip或者xsel ssh -X user@host (注意 这个 -X) 用 nvim/vimx target，然后按正常操作 你可以在本地的clipboard里发现你复制过来的东西 ！！ 如果你用 windows ssh过去，应该是 nvim+本地 lemonade或者doitclent的组合","categories":[],"tags":[]},{"title":"ubuntu-MATE  16.04 LTS 安装笔记","slug":"ubuntu-install-notes","date":"2017-03-02T09:56:34.000Z","updated":"2017-03-02T01:59:30.000Z","comments":true,"path":"2017/03/02/ubuntu-install-notes/","link":"","permalink":"http://leoatchina.github.io/2017/03/02/ubuntu-install-notes/","excerpt":"","text":"在 bash 下删除libreoffice12345sudo apt-get remove --purge libreoffice*sudo apt-get cleansudo apt-get autoremove 安装vim 等1234567sudo add-apt-repository ppa:wiznote-team ppa:plushuang-tw/uget-stable ppa:t-tujikawa/ppasudo apt-get remove vimsudo apt-get updatesudo apt-get install vim-gnome wiznote fcitx-table-wbpy exfat-fuse exfat-utils uget aria2 clipit git zsh openssh-server grub-customizer software-center terminator okular 安装编译相关1sudo apt-get install build-essential autoconf libtool pkg-config python-opengl python-imaging python-pyrex python-pyside.qtopengl idle-python2.7 qt4-dev-tools qt4-designer libqtgui4 libqtcore4 libqt4-xml libqt4-test libqt4-script libqt4-network libqt4-dbus python-qt4 python-qt4-gl libgle3 python-dev 安装chromium 在软件中心里搜索并且安装 安装owncloud1https://software.opensuse.org/download/package?project=isv:ownCloud:desktop&amp;package=owncloud-client 安装spf13123git clone https://github.com/leoatchina/spf13-leoatchina-vim.git cd spf13-leoatchina-vim bash bootstrap.sh 安装atom12https://atom.io/download/deb注意同步","categories":[],"tags":[]},{"title":"aria2+chrome+BaiduExporter破除速度限制下载百度云上的内容","slug":"chrome-baiduexporter-aria2-baiduyun-download-no-limit","date":"2017-03-01T14:51:46.000Z","updated":"2017-03-01T07:14:11.000Z","comments":true,"path":"2017/03/01/chrome-baiduexporter-aria2-baiduyun-download-no-limit/","link":"","permalink":"http://leoatchina.github.io/2017/03/01/chrome-baiduexporter-aria2-baiduyun-download-no-limit/","excerpt":"","text":"以前我在windows下面时曾经写过一篇aria2+chrome+BaiduExporter下载百度云 转到mac平台后，方法有所调整","categories":[],"tags":[]},{"title":"sslocal+proxychains4解决阿里云vps访问github过慢问题","slug":"proxychain-aliyun-shadowsocks","date":"2017-03-01T14:47:56.000Z","updated":"2017-03-25T03:09:11.000Z","comments":true,"path":"2017/03/01/proxychain-aliyun-shadowsocks/","link":"","permalink":"http://leoatchina.github.io/2017/03/01/proxychain-aliyun-shadowsocks/","excerpt":"","text":"阿里云从github clone一些软件后再编译安装 ，速度都很慢。试过改host或者设置 git的proxy，效果都不好，后来用 sslocal+proxychains4解决问题。 1. 安装pip wget -c https://bootstrap.pypa.io/get-pip.pypython get-pip.py 2. 安装 sslocal pip install shadowsocks 3. 配置sslocal vim ~/sslocal.json123456789&#123;&quot;server&quot;:&quot;1.1.1.1&quot;, #可以使用的ss服务器IP&quot;server_port&quot;:1035, #ss服务器端口&quot;local_address&quot;: &quot;0.0.0.0&quot;, #本地ip 注意：不要使用127.0.0.1或192.168.1.100等ip&quot;local_port&quot;:1080,#本地端口&quot;password&quot;:&quot;password&quot;,#连接ss服务器密码&quot;timeout&quot;:600,#等待超时&quot;method&quot;:&quot;rc4-md5&quot;#加密方式&#125; 4. 启动sslocal，并加入开机启动 nohup sslocal -c ~/sslocal .json &gt;/dev/null 2&gt;&amp;1 &amp;echo “ nohup sslocal -c ~/sslocal .json &gt;/dev/null 2&gt;&amp;1 &amp;” &gt;/etc/rc.local 5. 编译安装最新版 proxychains4 wget -c https://github.com/rofl0r/proxychains-ng/releases/download/v4.11/proxychains-ng-4.11.tar.bz2tar zxf proxychains-ng-4.11.tar.bz2cd proxychains-ng-4.11./configure &amp;&amp; make &amp;&amp; make install &amp;&amp; make install-config 6. 编辑proxychains4配置文件 vim /usr/local/etc/proxychains.conf更改 socks4 127.0.0.1 9050为socks5 127.0.0.1 1080 7. 测试下你的代理 proxychains4 curl https://api.ipify.org/?format=json 如果配置正确，返回你的ss服务器的ip地址 8. 用proxychain4+git下载 proxychains4 git clone https://github.com/xxxxx/xxxxx.git 下面是我的一个测试结果，速度从4k提升到了1.5m123456789[proxychains] DLL init: proxychains-ng 4.11[proxychains] Strict chain ... 127.0.0.1:1080 ... github.com:443 ... OK[proxychains] DLL init: proxychains-ng 4.11[proxychains] Strict chain ... 127.0.0.1:1080 ... github.com:443 ... OKremote: Counting objects: 120391, done.[proxychains] DLL init: proxychains-ng 4.11remote: Total 120391 (delta 0), reused 0 (delta 0), pack-reused 120390Receiving objects: 100% (120391/120391), 84.22 MiB | 1.51 MiB/s, done.Resolving deltas: 100% (81308/81308), done.","categories":[],"tags":[{"name":"shadowsocks","slug":"shadowsocks","permalink":"http://leoatchina.github.io/tags/shadowsocks/"},{"name":"github","slug":"github","permalink":"http://leoatchina.github.io/tags/github/"},{"name":"阿里云","slug":"阿里云","permalink":"http://leoatchina.github.io/tags/阿里云/"}]},{"title":"在服务器上装r时踩到的坑","slug":"install-r-with-zlib-support","date":"2017-02-21T09:53:13.000Z","updated":"2017-02-21T09:17:58.000Z","comments":true,"path":"2017/02/21/install-r-with-zlib-support/","link":"","permalink":"http://leoatchina.github.io/2017/02/21/install-r-with-zlib-support/","excerpt":"","text":"为什么要在服务器上装R其实原因很简单，服务器的性能更强，而且在装了anaconda2后，有比较理想的“云界面”，所以想要扩展R 下载，安装123wget &amp;&amp; tar &amp;&amp; cd # 这个都是常规，不表。出于实验的目的，我试了下无root权限安装# 进行onfigure 这一步就出问题./configure --prefix=$HOME/R/R-3.3.2 --enable-R-shlib 安装zlib上一步时一直提醒我缺少安装zlib1.2.5以上版本，将就下载，也是无root安装123456wget -c http://www.zlib.net/zlib1211.zip #注意我下载 的是1.2.11版本unzip zlibi1211cd zlib-1.2.11./configure --prefix=$HOME/packagesmakemake install 问题还是同样的问题，提醒没有zlib1.2.5以上版本，好，指定目录confiture ./configure –prefix=$HOME/R/R-3.3.2 –enable-R-shlib LDFLAGS=”-L$HOME/packages/lib” CPPFLAGS=”-I$HOME/packages/include” 始终不行，中途试过root权限，换安装位置，重新下载3.3.1等，设置编译参数，都不行 检查configure代码 vim configure发现了检查zlib版本的代码，有一个 &gt;1.2.5 顿悟在网上搜索时，发现很多人也有这个问题，突然想到，是不是这个检查zlib版本的代码不对，导致这一步检测不过？我用的是 1.2.11的包，这是一个字符，不是一个数字是不是作为字符来说，是1.2.11 &lt; 1.2.5 ? 换装R3.2.5由于此时已经下载了3.2.5的R包，所以试试123./configure --prefix=$HOME/R/R-3.2.5 --enable-R-shlib LDFLAGS=\"-L$HOME/packages/lib\" CPPFLAGS=\"-I$HOME/packages/include\" # 检查通过 ！！！看来这个问题可能在3.3.X的版本上makemake install # 顺利装上 第二天检查 R-3.3.2的安装重新非root安装zlib1.2.8到$HOME/packages，然后去configureR-3.3.212./configure --prefix=$HOME/R/R-3.3.2 --enable-R-shlib LDFLAGS=\"-L$HOME/packages/lib\" CPPFLAGS=\"-I$HOME/packages/include\" # 编译通过zlib，但是没通过bzip# 不理他了，先用着已经装上的R-3.2.5版本吧！！！ ### 给anconda2安装R扩展首先，要把R加入当前的$PATH，在你的’~/.zshrc’或者’~/.bashrc’里加入 export PATH=”$HOME/anaconda2/bin:$HOME/R/R-3.2.5/bin:$PATH”source ~/.zshrc 安装R的包1234R # 第一样自然是启动R install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdoZMQ', 'devtools', 'uuid', 'digest'))devtools::install_github('IRkernel/IRkernel')IRkernel::installspec() 会有这样一句话 [InstallKernelSpec] Installed kernelspec ir in /home/xx/.local/share/jupyter/kernels/ir,同时你看到你可以生成R的文本了 在安装R包时可能碰到的问题123456# 首先，是不能下载包options(download.file.method = \"wget\") # 编译时碰到的 libssl libcrypto 文件找不到的问题cd /usr/lib64sudo ln -s libcrypto.so.1.0.1e libcrypto.so.1.0.0sudo ln -s libssl.so.1.0.1e libssl.so.1.0.0","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://leoatchina.github.io/tags/linux/"},{"name":"r","slug":"r","permalink":"http://leoatchina.github.io/tags/r/"},{"name":"zlib","slug":"zlib","permalink":"http://leoatchina.github.io/tags/zlib/"},{"name":"centos","slug":"centos","permalink":"http://leoatchina.github.io/tags/centos/"}]},{"title":"学习Anaconda过程中的一些笔记，或者说踩过的坑","slug":"anaconda-starter-turtorials","date":"2017-02-20T14:12:52.000Z","updated":"2017-02-20T09:26:49.000Z","comments":true,"path":"2017/02/20/anaconda-starter-turtorials/","link":"","permalink":"http://leoatchina.github.io/2017/02/20/anaconda-starter-turtorials/","excerpt":"","text":"Anaconda概述Anaconda是一个用于科学计算的Python发行版，支持 Linux, Mac, Windows系统，提供了包管理与环境管理的功能，可以很方便地解决多版本python并存、切换以及各种第三方包安装问题。Anaconda利用工具/命令conda来进行package和environment的管理，并且已经包含了Python和相关的配套工具。conda可以理解为一个工具，也是一个可执行命令，其核心功能是包管理与环境管理。 包管理与pip的使用类似，环境管理则允许用户方便地安装不同版本的python并可以快速切换。 Anaconda则是一个打包的集合，里面预装好了conda、某个版本的python、众多packages、科学计算工具等等，所以也称为Python的一种发行版 conda将几乎所有的工具、第三方包都当做package对待，甚至包括python和conda自身。所以，conda打破了包管理和环境管理约束，能非常方便地安装各种python conda和virtualenv: 在我看来，conda是用于科学计算环境布置，virtualenv主要是用于web服务。 Anaconda安装 去 https://repo.continuum.io/archive/ 下载最新版的 Anaconda要说明的是, Anaconda有for python2和python3的版本，不过除了这个不同，其他基本没什么区别，我的生信服务器默认是python2，安装了Anaconda2可以直接用wget下载 ，wget -c https://repo.continuum.io/archive/Anaconda2-4.3.0-Linux-x86_64.sh不用root安装 ，直接安装到当前用户，bash Anaconda2-4.3.0-Linux-x86_64.sh，会安装在~/anaconda2注意运行路径，在安装anaconda时，会提醒你在~/.bashrc里加一句export PATH=&quot;~/anaconda2/bin:$PATH&quot;,但如果你是和我一样，是用zsh为shell，请注意在~/.zshrc里加上这一句用户安装的不同的python环境都会被放在~/anaconda/envs下，可以在命令中运行conda info -e 查看已经安装的环境，当前已被激活的环境会显示有一个星号或者括号 换成更快的服务器 conda的服务器在国外，如果直接去升级安装会很慢，要换成清华的镜像如果不做这一步，非常容易出现不能升级安装conda包的情况 1234# 添加Anaconda的TUNA镜像conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/# 设置搜索时显示通道地址conda config --set show_channel_urls yes conda的环境管理Conda的环境管理功能允许我们同时安装若干不同版本的Python，并能自由切换。对于上述安装过程，假设我们采用的是Python 2.7对应的安装包，那么Python 2.7就是默认的环境（默认名字是root，注意这个root不是超级管理员的意思。比如我的python的是2.7.13，运行python -V，会显示Python 2.7.13 :: Anaconda 4.3.0 (64-bit)如果我要使用 python3.5，那就安装一个起名为python35的环境12345678910111213conda create --name python35 python3.5# 安装好后，使用activate激活某个环境activate python35 # for Windowssource activate python35 # for Linux &amp; Mac# 激活后，会发现terminal输入的地方多了python35的字样，实际上，此时系统/做的事情就是把默认2.7环境从PATH中去除，再把3.5对应的命令加入PATH# 你可以用 `which python`或者 `python -V`查看# 如果想返回默认的python 2.7环境，运行deactivate python35 # for Windowssource deactivate python35 # for Linux &amp; Mac# 删除一个已有的环境conda remove --name python35 --all conda的包管理，和pip类似，比如你想安装scipy123# 安装scipyconda install scipy# conda会从从远程搜索scipy的相关信息和依赖项目，对于python 3.4，conda会同时安装numpy和mkl（运算加速的库） conda的一些常用操作如下：12345678910111213141516171819# 查看当前环境下已安装的包conda list# 查看某个指定环境的已安装包conda list -n python35# 查找package信息conda search numpy# 安装packageconda install -n python35 numpy# 如果不用-n指定环境名称，则被安装在当前活跃环境# 更新packageconda update -n python35 numpy# 删除packageconda remove -n python35 numpy conda将conda、python等都视为package，因此，完全可以使用conda来管理conda和python的版本，例如123456789101112# 更新conda，保持conda最新conda update conda# 更新anacondaconda update anaconda# 更新pythonconda update python# 安装python3.5的anacondaconda install -n python35 anacodnda# 然后你会看到要安装这么多包!!!!!! 布置jupyter nookbook首先安装下ipython sudo yum install ipython 生成配置文件 jupyter notebook –generate-config生成的文件为~/.jupyter/jupyter_notebook_config.py 生成密码123456ipythonIn [1]: from IPython.lib import passwdIn [2]: passwd()Enter password: Verify password: Out[2]: &apos;sha1:7467b7351f12:79fc65998**************3003b87f3&apos; 记录下这个 sha1值，以后要用到 生成jupyter配置文件jupyter notebook --generate-config以上将会在 ~/.jupyter/ 下创建默认config 文件: jupyter_notebook_config.py 修改jupyter配置文件 ，vim ~/.jupyter/jupyter_notebook_config.py123456c.NotebookApp.ip = '*' #任何ip都可以c.NotebookApp.open_browser = Falsec.NotebookApp.password = u'sha1:209f151dcd7f:a730a81fd00********3ec0a6aa31'#设置密码的时候生成的sha1c.NotebookApp.port = 8888# 设置未被使用的端口c.NotebookApp.notebook_dir = u'/mnt/projects' # Notebook启动目录 启动jupyterjupyter notebook然后你通过 http://ip:8888就可以访问你的工作目录了 参考Anaconda使用总结 ypyb PeterYuanJupyter notebook 服务器端部署","categories":[],"tags":[{"name":"anacond","slug":"anacond","permalink":"http://leoatchina.github.io/tags/anacond/"},{"name":"python","slug":"python","permalink":"http://leoatchina.github.io/tags/python/"},{"name":"linux","slug":"linux","permalink":"http://leoatchina.github.io/tags/linux/"}]},{"title":"atom-shortcuts-windows","slug":"atom-shortcuts-windows","date":"2017-02-16T14:00:08.000Z","updated":"2017-02-16T06:02:10.000Z","comments":true,"path":"2017/02/16/atom-shortcuts-windows/","link":"","permalink":"http://leoatchina.github.io/2017/02/16/atom-shortcuts-windows/","excerpt":"","text":"文件操作‘ctrl-shift-s’ 保存所有打开的文件‘ctrl-shift-o’ 打开目录‘ctrl-p’ 从添加的项目中查找文件‘ctrl-f’ 向下翻页‘ctrl-b’ 向上翻页alt-b 或 ctrl-left 移动到单词开始alt-f 或 ctrl-right 移动到单词末尾ctrl-g 移动到指定行ctrl-j 将下一行与当前行合并ctrl-up, ctrl-down 使当前行向上或者向下移动ctrl-enter,ctrl-shift-enter在当前行的下一行或上一行插入新的一行ctrl-k ctrl-l使当前字符小写ctrl-k ctrl-u使当前字符大写ctrl-shift-D 复制当前行到下一行ctrl-shift-K 删除当前行ctrl-u删除到当前行开始alt-backspace或ctrl-alt-h删除到当前子单词开始alt-delete或ctrl-alt-d删除到当前子单词结束ctrl-backspace或ctrl-w或alt-h删除到当前单词开始alt-d或ctrl-delete删除到当前子单词开始alt-left: ‘editor:move-to-previous-subword-boundary’alt-right: ‘editor:move-to-next-subword-boundary’alt-shift-left: ‘editor:select-to-previous-subword-boundary’alt-shift-right: ‘editor:select-to-next-subword-boundary’ 选取alt-shift-B或 ctrl-shift-left 选取至字符开始alt-shift-F或ctrl-shift-right 选取至字符结束ctrl-a 全选alt-f3选取文档中和当前单词相同的所有单词shift-end 选取至本行结束ctrl-l 选取一行，继续按回选取下一行ctrl-d 选取文档中和当前单词相同的下一处 目录树操作ctrl-\\ 或 ctrl-k ctrl-b 显示或隐藏目录树a 在目录树下添加文件d 将当前文件另存为alt-right 和 alt-left 展开(隐藏)所有目录ctrl-k left 在左半视图中打开文件ctrl-k down在下半视图中打开文件ctrl-k up 在上半视图中打开文件ctrl-k right 在右半视图中打开文件ctrl-shift-C 复制当前文件绝对路径 其它ctrl-m 相应括号之间，html tag之间等跳转ctrl-alt-up, ctrl-alt-down 增加上（下）一行光标ctrl-shift-u 调出切换编码选项ctrl-f 在buffer中查找ctrl-shift-f 在整个工程中查找alt-ctrl-[ 折叠alt-ctrl-] 展开ctrl-alt-i调用控制台ctrl-/注释ctrl-alt-c打开color-picker","categories":[],"tags":[{"name":"atom","slug":"atom","permalink":"http://leoatchina.github.io/tags/atom/"},{"name":"shortcuts","slug":"shortcuts","permalink":"http://leoatchina.github.io/tags/shortcuts/"}]},{"title":"Atom MacOs 快捷键","slug":"atom-shortcuts-macos","date":"2017-02-16T13:39:55.000Z","updated":"2017-10-15T07:12:30.000Z","comments":true,"path":"2017/02/16/atom-shortcuts-macos/","link":"","permalink":"http://leoatchina.github.io/2017/02/16/atom-shortcuts-macos/","excerpt":"","text":"文件切换ctrl-shift-s 保存所有打开的文件cmd-shift-o 打开目录cmd-\\ 显示或隐藏目录树ctrl-0 焦点移到目录树目录树下，使用a，m，delete来增加，修改和删除cmd-t或cmd-p 查找文件cmd-b 在打开的文件之间切换cmd-shift-b 只搜索从上次git commit后修改或者新增的文件 导航（等价于上下左右）ctrl-p 前一行ctrl-n 后一行ctrl-f 前一个字符ctrl-b 后一个字符 alt-B, alt-left 移动到单词开始alt-F, alt-right 移动到单词末尾 cmd-right, ctrl-E 移动到一行结束cmd-left, ctrl-A 移动到一行开始 cmd-up 移动到文件开始cmd-down 移动到文件结束 ctrl-g 移动到指定行 row:column 处 cmd-r 在方法之间跳转 目录树操作cmd-\\ 或者 cmd-k cmd-b 显示(隐藏)目录树ctrl-0 焦点切换到目录树(再按一次或者Esc退出目录树)a 添加文件d 将当前文件另存为(duplicate)i 显示(隐藏)版本控制忽略的文件alt-right 和 alt-left 展开(隐藏)所有目录ctrl-al-] 和 ctrl-al-[ 同上ctrl-[ 和 ctrl-] 展开(隐藏)当前目录ctrl-f 和 ctrl-b 同上cmd-k h 或者 cmd-k left 在左半视图中打开文件cmd-k j 或者 cmd-k down 在下半视图中打开文件cmd-k k 或者 cmd-k up 在上半视图中打开文件cmd-k l 或者 cmd-k right 在右半视图中打开文件ctrl-shift-C 复制当前文件绝对路径 书签cmd-F2 在本行增加书签F2 跳到当前文件的下一条书签shift-F2 跳到当前文件的上一条书签ctrl-F2 列出当前工程所有书签 选取 大部分和导航一致，只不过加上shift ctrl-shift-P 选取至上一行ctrl-shift-N 选取至下一样ctrl-shift-B 选取至前一个字符ctrl-shift-F 选取至后一个字符alt-shift-B, alt-shift-left 选取至字符开始alt-shift-F, alt-shift-right 选取至字符结束ctrl-shift-E, cmd-shift-right 选取至本行结束ctrl-shift-A, cmd-shift-left 选取至本行开始cmd-shift-up 选取至文件开始cmd-shift-down 选取至文件结尾cmd-A 全选cmd-L 选取一行，继续按回选取下一行ctrl-shift-W 选取当前单词 编辑和删除文本基本操作ctrl-T 使光标前后字符交换cmd-J 将下一行与当前行合并ctrl-cmd-up, ctrl-cmd-down 使当前行向上或者向下移动cmd-shift-D 复制当前行到下一行cmd-K, cmd-U 使当前字符大写cmd-K, cmd-L 使当前字符小写cmd-shift-P 搜索命令 删除和剪切ctrl-shift-K 删除当前行cmd-backspace 删除到当前行开始cmd-fn-backspace 删除到当前行结束ctrl-K 剪切到当前行结束alt-backspace 或 alt-H 删除到当前单词开始alt-delete 或 alt-D 删除到当前单词结束 多光标和多处选取cmd-click 增加新光标cmd-shift-L 将多行选取改为多行光标ctrl-shift-up, ctrl-shift-down 增加上（下）一行光标cmd-D 选取文档中和当前单词相同的下一处ctrl-cmd-G 选取文档中所有和当前光标单词相同的位置 括号跳转ctrl-m 相应括号之间，html tag之间等跳转ctrl-cmd-m 括号(tag)之间文本选取alt-cmd-. 关闭当前XML/HTML tag 编码方式ctrl-shift-U 调出切换编码选项 查找和替换cmd-F 在buffer中查找cmd-shift-f 在整个工程中查找 代码片段alt-shift-S 查看当前可用代码片段 在~/.atom目录下snippets.cson文件中存放了你定制的snippets 定制说明 自动补全ctrl-space 提示补全信息 折叠alt-cmd-[ 折叠alt-cmd-] 展开alt-cmd-shift-{ 折叠全部alt-cmd-shift-} 展开全部cmd-k cmd-N 指定折叠层级 N为层级数 文件语法高亮ctrl-shift-L 选择文本类型 使用Atom进行写作ctrl-shift-M Markdown预览可用代码片段 b, legal, img, l, i, code, t, table git操作cmd-alt-Z checkout HEAD 版本cmd-shift-B 弹出untracked 和 modified文件列表alt-g down alt-g up 在修改处跳转alt-G D 弹出diff列表alt-G O 在github上打开文件alt-G G 在github上打开项目地址alt-G B 在github上打开文件blamealt-G H 在github上打开文件historyalt-G I 在github上打开issuesalt-G R 在github打开分支比较alt-G C 拷贝当前文件在gihub上的网址 推荐一些好用的插件 主题atom-material-ui 好看到爆atom-material-syntax 美化atom-beautify 一键代码美化file-icons 给文件加上好看的图标atom-minimap 方便美观的缩略滚动图pretty-json json格式化工具activate-power-mode 炫酷的打字特效 gitatomatigit 可视化git操作git-time-machine git版本对比工具，可视化选择每一个commitmerge-conflicts 合并冲突可视化工具 代码提示emmet 这个不用介绍了吧atom-ternjs js代码提示很强大，高度定制化docblockr jsdoc 给js添加注释autoclose-html 闭合html标签color-picker 取色器 必备插件pigments 颜色显示插件 必装terminal-panel 直接在atom里面写命令了svg-preview svg预览 便捷操作advanced-open-file 快速打开、切换文件project-folder 快速打开、切换项目script 立即执行当前js文件 高亮language-vue vue框架代码高亮 终端platformio-atom-ide-terminal 终端插件，支持显示、隐藏及多窗口 就这些了，欢迎pull更多好用的插件！","categories":[],"tags":[{"name":"atom","slug":"atom","permalink":"http://leoatchina.github.io/tags/atom/"},{"name":"shortcuts","slug":"shortcuts","permalink":"http://leoatchina.github.io/tags/shortcuts/"}]},{"title":"centos升级gcc","slug":"update-centos-gcc-compile-myself","date":"2017-02-15T09:43:18.000Z","updated":"2017-02-15T04:55:30.000Z","comments":true,"path":"2017/02/15/update-centos-gcc-compile-myself/","link":"","permalink":"http://leoatchina.github.io/2017/02/15/update-centos-gcc-compile-myself/","excerpt":"","text":"我的生信小型机装的系统是centos6.6,在装vim的插件YouCompleteMe时，需要gcc升级到4.8以上版本。网上搜索了一番后，编译安装最新版。 下载最新版gcc并解压 wget -c http://ftp.gnu.org/gnu/gcc/gcc-6.3.0/gcc-6.3.0.tar.bz2tar jxvf gcc-6.3.0.tar.bz2 下载另外所需文件 cd gcc-6.3.0./contrib/download_prerequisites 建立一个目录供编译出的文件存放 mkdir gcc-build-6.3.0cd gcc-build-6.3.0 生成Makefile文件,注意我把prefix设置成了 /usr,直接把gcc装到对应的目录，不需要ln -s了 ../configure -enable-checking=release -enable-languages=c,c++ -disable-multilib –prefix=/usr 编译,j后面是核心数，我因为是小型服务器，一共8核16线程，所以就设置的比较大，一般设置成4 make -j8 //我的cpu跑到了差不多满100% 安装 sudo make install 检查,如 gcc –versionc++ –versioncc –versionwhereis gccwhich gcc","categories":[{"name":"linux","slug":"linux","permalink":"http://leoatchina.github.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://leoatchina.github.io/tags/linux/"},{"name":"centos","slug":"centos","permalink":"http://leoatchina.github.io/tags/centos/"},{"name":"gcc","slug":"gcc","permalink":"http://leoatchina.github.io/tags/gcc/"},{"name":"编译","slug":"编译","permalink":"http://leoatchina.github.io/tags/编译/"},{"name":"c++","slug":"c","permalink":"http://leoatchina.github.io/tags/c/"}]},{"title":"python_thread_sync","slug":"python-thread-sync","date":"2017-02-14T15:55:14.000Z","updated":"2017-02-17T07:30:11.000Z","comments":true,"path":"2017/02/14/python-thread-sync/","link":"","permalink":"http://leoatchina.github.io/2017/02/14/python-thread-sync/","excerpt":"","text":"前言Python的代码的执行是由Python虚拟机（又名解释器主循环）进行控制的。Python在设计时就是这样考虑的，在主循环中同时只能有一个控制线程在执行，就像单核CPU系统中的多进程一样。内存中可以有许多程序，但是在任意给定时刻只能有一个程序在运行。同理，尽管Python解释器中可以运行多个线程，但是在任意给定时刻只有一个线程会被解释器执行。对Python虚拟机的访问是由全局解释锁（GIL）控制的。这个锁就是用来保证同时只能有一个线程运行的。在多线程环境中，Python虚拟机将按下面所述的方式执行。 设置GIL。 切换进一个线程去运行。 执行下面操作之一。 指定数量的字节码指令 线程主动让出控制权 把线程设置回睡眠状态 解锁GIL 重复上述步骤 在讨论普通的GIL之前，有一点要强调的是GIL只会影响到那些严重依赖CPU的程序（比如计算型的）。 如果你的程序大部分只会设计到I/O，比如网络交互，那么使用多线程就很合适， 因为它们大部分时间都在等待。对于CPU依赖型的程序，你要搞清楚计算的特点。把性能瓶颈优化到关键的部分，如对数组的操作用NumPy这样的模块就非常的高效。 theading模块是最常用的多线程模块,老的thread模块就不用看了 有Thread、Lock、Rock、Condition、Event、Semaphore、BoundedSemphore、Timer、Barrier等一系列可用对象 Thread对象基本代码1234567# 建立对象t = threading.Thread(target = function, args = (arg1,arg2))# 一般来说，Thread线程对象建立之后，不是马上启动的，是用start方法启动t.start()# 加入主线程，如果不加入，在主线程退出后仍然运行。join()方法只有在你需要等待线程完成的时候才是有用的# join如果不被调用 ，将会一直被运行t.join() Thread启动后不能用ctrl+c手动终止的解决方法这里引用别人描述 爬虫作为子线程运行时不受键盘中断信号影响，Ctrl-C无法终止整个爬虫运行。另外的一个场景是多线程压力测试，需要提前终止的情况下，Ctrl-C依旧不能终止整个程序。除了简单粗暴的使用kill命令强行终止之外，本文将给出一个简单可行的解决方案。可能,python2 和python3对于异常的处理逻辑不一致，2中所有的异常在主线程真正退出时才被捕获。","categories":[{"name":"python","slug":"python","permalink":"http://leoatchina.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://leoatchina.github.io/tags/python/"},{"name":"thread","slug":"thread","permalink":"http://leoatchina.github.io/tags/thread/"}]}]}