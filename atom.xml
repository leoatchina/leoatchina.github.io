<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>leoatchina的博客</title>
  <subtitle>一个折腾控写字的地方,生信小菜鸟弱弱地打怪升级中。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://leoatchina.github.io/"/>
  <updated>2017-03-05T03:48:12.000Z</updated>
  <id>http://leoatchina.github.io/</id>
  
  <author>
    <name>leoatchina</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ubuntu服务器samba、ftp、timemachine配置过程</title>
    <link href="http://leoatchina.github.io/2017/03/05/ubuntu-samba-ftp-timemachine-config/"/>
    <id>http://leoatchina.github.io/2017/03/05/ubuntu-samba-ftp-timemachine-config/</id>
    <published>2017-03-05T02:41:35.000Z</published>
    <updated>2017-03-05T03:48:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为家里htpc服务器的ubuntu电脑由于前面操作不慎，系统出了一些非常影响检验的总是，特别是owncloud功能挂了，最后决定重装。<br>重装后先把最重要的 samba，ftp，timemachine功能给恢复回来，其他以后慢慢搞。<br>在这过程中，又重新看了以前的笔记，查了一些资料，在实践中发现无论原来的笔记，人家的经验都有一些繁琐，或不是非常正确的地方， 这里记录下自己的配置备参考 。</p>
<h3 id="电脑硬盘和目录"><a href="#电脑硬盘和目录" class="headerlink" title="电脑硬盘和目录"></a>电脑硬盘和目录</h3><p>有一个ssd和一个hdd，hdd mount成 <code>/mnt/</code>。<br><strong>这里有一个非常容易忽视的设置，要把 /mnt/和其子目录设置成 samba帐号 可读写和执行，否则samba服务会报权限错误</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod 770 -R /mnt</div></pre></td></tr></table></figure></p>
<p>我的/mnt下面的文件夹分配<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># htpc @ htpc in /mnt [10:48:35]</div><div class="line">$ ls -alh</div><div class="line">total 36K</div><div class="line">drwxrwxrwx  8 htpc     htpc 4.0K 3月   4 22:30 .</div><div class="line">drwxr-xr-x 24 root     root 4.0K 3月   4 10:39 ..</div><div class="line">drwxrwx---  4 htpc     htpc 4.0K 3月   4 09:39 backup</div><div class="line">drwxrwx---  5 htpc     htpc 4.0K 3月   4 11:16 config</div><div class="line">dr-xr-x---  5 share    htpc 4.0K 3月   4 22:31 ftp # ftp主目录</div><div class="line">drwxrwx---  4 www-data htpc 4.0K 2月  21 22:02 owncloud # owncloud目录</div><div class="line">drwxrwx--- 10 share    htpc 4.0K 3月   4 22:43 share # 这个是samba的</div><div class="line">drwxrwx---  8 tm       htpc 4.0K 3月   5 10:48 timemachine # mac用的timemachine目录</div></pre></td></tr></table></figure></p>
<p>其中， share目录通过修改 <code>/etc/fstab</code> 开机mount到  <code>/mnt/ftp/share</code>中去。在这个文件最后加这样一句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/mnt/share /mnt/ftp/share none bind 0 0</div></pre></td></tr></table></figure></p>
<p>为什么要这么做，是因为<strong>vsftp</strong>的要求：不能在ftp的根目录可写，所以ftp这个目录的权限也要设置成 <strong>550</strong></p>
<h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><h4 id="samba和ftp的share帐号"><a href="#samba和ftp的share帐号" class="headerlink" title="samba和ftp的share帐号"></a>samba和ftp的<strong>share</strong>帐号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo useradd share -d /mnt/ftp -s /usr/sbin/nologin -g htpc</div></pre></td></tr></table></figure>
<p>说明下</p>
<blockquote>
<ul>
<li>-d 主目录，为了ftp服务</li>
<li>-s 设置shell为 nologin，就是不能远程登陆</li>
<li>-g 设置成htpc组，这个其实是为了htpc这个主账号登陆上去后管理方便，不是一定要设置</li>
</ul>
</blockquote>
<h3 id="samba"><a href="#samba" class="headerlink" title="samba"></a>samba</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install samba</div></pre></td></tr></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><blockquote>
<p>sudo vim /etc/samba/smb.conf  </p>
</blockquote>
<p>网上的教程太冗余，我先贴我的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[global]</div><div class="line">netbios name        = htpc  #局域网显示名称</div><div class="line">server string       = Samba Server Version %v </div><div class="line">workgroup           = workgroup #局域网共享分组</div><div class="line">load printers       = no</div><div class="line">security            = user # 这个比较重要，设计成user是根据你linux内帐户权限对共享目录进行访问</div><div class="line">log level           = 8</div><div class="line">log file            = /var/log/samba/samba.log</div><div class="line">max log size        = 50</div><div class="line">unix charset        = utf8 #这个也比较重要</div><div class="line">map hidden          = no</div><div class="line"></div><div class="line">[share]</div><div class="line">comment             = share </div><div class="line">path                = /mnt/share # 路径</div><div class="line">browseable          = yes #这个其实比较重要的，如果设置成no，你的这个目录在共享里是看不到的，除非输入路径</div><div class="line">writable            = yes</div><div class="line">read only           = no</div><div class="line">valid users         = share,@htpc # 允许访问的用户和用户组</div><div class="line">write list          = share,@htpc # 允许写入的用户和用户组</div></pre></td></tr></table></figure></p>
<h4 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h4><blockquote>
<p>sudo service smbd restart</p>
</blockquote>
<p>再强调一次，设置samba目录时，要把父目录也设置成share帐户可读入，否则不能访问samba目录</p>
<h3 id="ftp-其实就是vsftp"><a href="#ftp-其实就是vsftp" class="headerlink" title="ftp,其实就是vsftp"></a>ftp,其实就是vsftp</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><blockquote>
<p>sudo apt-get install vsftpd</p>
</blockquote>
<h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p><code>sudo vim /etc/vsftp</code><br>还是一句话，网上的配置太麻烦，贴我的,其实就几个地方比较重要<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">listen=YES</div><div class="line">anonymous_enable=NO</div><div class="line">local_enable=YES #用本地帐户登陆</div><div class="line">write_enable=YES</div><div class="line">local_umask=022</div><div class="line">local_root=/mnt/ftp # 主目录</div><div class="line">max_clients=5</div><div class="line">dirmessage_enable=YES</div><div class="line">use_localtime=YES</div><div class="line">xferlog_enable=YES</div><div class="line">idle_session_timeout=600</div><div class="line">data_connection_timeout=120</div><div class="line">secure_chroot_dir=/var/run/vsftpd/empty</div><div class="line">pam_service_name=ftp</div><div class="line">rsa_cert_file=/etc/ssl/private/vsftpd.pem</div><div class="line">chroot_local_user=YES #限制在ftp 主目录内，这也是前面 mount share目录的原因</div></pre></td></tr></table></figure></p>
<h4 id="重启和登陆ftp"><a href="#重启和登陆ftp" class="headerlink" title="重启和登陆ftp"></a>重启和登陆ftp</h4><blockquote>
<p>sudo service vsftpd restart</p>
</blockquote>
<p>然后你用 ubuntu share账户就可以登陆了</p>
<h3 id="timemachine"><a href="#timemachine" class="headerlink" title="timemachine"></a>timemachine</h3><p>这里我必须吐槽一下， 网上找到很多教程，装这个装那个，配这个配那个，其实在最新版的ubuntu下面，avahi服务是自带的，根本不用装，而且一般人要用到的配置也很简单，抄来抄去写那么多干什么。</p>
<h4 id="安装-，就装这个就行了"><a href="#安装-，就装这个就行了" class="headerlink" title="安装 ，就装这个就行了"></a>安装 ，就装这个就行了</h4><blockquote>
<p>sudo apt-get install netatalk </p>
</blockquote>
<h4 id="配置，就改最后两行就够了"><a href="#配置，就改最后两行就够了" class="headerlink" title="配置，就改最后两行就够了"></a>配置，就改最后两行就够了</h4><blockquote>
<p>sudo vim /etc/netatalk/AppleVolumes.default   </p>
</blockquote>
<p>注释掉 <code>&quot;Home Directory&quot;</code>，加上这么一句 <code>/mnt/timemachine/ &quot;TimeMachine&quot; volsizelimit:600000 options:tm</code><br>然后呢，最多对 <code>/mnt/timemachine</code>目录设置一个专门帐号，就行了</p>
<h4 id="重启和访问"><a href="#重启和访问" class="headerlink" title="重启和访问"></a>重启和访问</h4><blockquote>
<p>sudo service netatalk restart</p>
</blockquote>
<p>在finder里，按 <code>cmd+k</code>，输入 <code>afp://ip</code> 访问你的<code>TimeMachine</code>服务器，然后你打开timemachine设置选择你的 TimeMachine</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为家里htpc服务器的ubuntu电脑由于前面操作不慎，系统出了一些非常影响检验的总是，特别是owncloud功能挂了，最后决定重装。&lt;br&gt;重装后先把最重要的 samba，ftp，timemachine功能给恢复回来，其他以后慢慢搞。&lt;br&gt;在这过程中，又重新看了以前的
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://leoatchina.github.io/tags/ubuntu/"/>
    
      <category term="samba" scheme="http://leoatchina.github.io/tags/samba/"/>
    
      <category term="ftp" scheme="http://leoatchina.github.io/tags/ftp/"/>
    
      <category term="timemachine" scheme="http://leoatchina.github.io/tags/timemachine/"/>
    
  </entry>
  
  <entry>
    <title>用ubuntu+owncloud+nginx+php-fpm+mysql+aria2打造私有云+远程下载器</title>
    <link href="http://leoatchina.github.io/2017/03/02/ubuntu-owncloud-nginx-php-fpm-mysql-aria2-private-storage/"/>
    <id>http://leoatchina.github.io/2017/03/02/ubuntu-owncloud-nginx-php-fpm-mysql-aria2-private-storage/</id>
    <published>2017-03-02T02:14:34.000Z</published>
    <updated>2017-03-05T14:06:50.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h4 id="起由"><a href="#起由" class="headerlink" title="起由"></a>起由</h4><ul>
<li>由于最近的“净网”行动，很多网盘包括我一直在使用的快盘关停，仍然存活的百度云、360云等又没有linux客户端，用Dropbox等国外网盘受空间和墙的限制比较大。</li>
<li>同时又有一定的收集高清电影在局域网里共享播放的需要。家里是百兆电信宽带，平时空时可以用来下载，所以有了自建以私有云为基础的服务器的想法。</li>
<li>私有云方案有多种方案，出于可扩展功能的需要，选择了Ubuntu14.04+Owncloud的方案，使用者要有一点的linux操作和vi编辑经验。</li>
<li>顺带要把mysql和phpmyadmin也配置好</li>
</ul>
<hr>
<h4 id="主机配置"><a href="#主机配置" class="headerlink" title="主机配置"></a>主机配置</h4><ul>
<li>主机放于家庭电视机柜中，24小时开机，乔思伯V3 ITX HTPC机箱<br><img src="http://upload-images.jianshu.io/upload_images/109760-b50678062c7a4950.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="乔思伯V3机箱"></li>
<li>内存2G x 2，系统装在一块64Gssd上，另外有一块4T的硬盘作主力盘</li>
<li>主板集成J1800 CPU，无风扇，TDP 15w，足够放1080p X264编码的高清电影，不过现在建议用更高级的J3455主板，能放4k的高清。<br><img src="http://upload-images.jianshu.io/upload_images/109760-d8dccadd19b56b00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="J1800主板"></li>
<li>不算硬盘，HTPC的资金投入是 主板250+内存100+机箱200+电源150=<strong>700</strong></li>
</ul>
<h4 id="带端口映射的智能路由器"><a href="#带端口映射的智能路由器" class="headerlink" title="带端口映射的智能路由器"></a>带端口映射的智能路由器</h4><ul>
<li>一般情况下，家庭局域网出口在公网环境下是没有固定ip，所以路由要有动态域名解析功能，能从公网环境中反向通过家庭路由访问到局域网</li>
<li>由于电信封了80和8080端口，同时又要把对路由公网ip的访问转到HTPC上，所以要有端口映射功能</li>
<li>又有其他翻墙、路由分离功能</li>
<li>openwrt是一个比较好的方案，我的方案是淘宝上这一款<a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.lO3pnV&amp;id=520910420562&amp;_u=1vope65d47" target="_blank" rel="external"> 841N 五口 OpenWrt 无线路由器 16M 64M 双天线</a>，体积小，拆掉天线后放入弱电箱，无线功能靠二级路由实现，要注意要把二级跟帖的ip段设置的和主路由一样。<br><img src="http://upload-images.jianshu.io/upload_images/109760-47f39fd3e3ab2b9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" 841N 五口 OpenWrt 无线路由器 "></li>
<li>现在换成了斐讯k2 <img src="/2017/03/02/ubuntu-owncloud-nginx-php-fpm-mysql-aria2-private-storage/af3bbc95c3be2aba6619fa4f46218797.png" alt="k2路由器"> 请去刷入 padavan系统</li>
</ul>
<hr>
<h4 id="开启路由器的端口映射"><a href="#开启路由器的端口映射" class="headerlink" title="开启路由器的端口映射"></a>开启路由器的端口映射</h4><ul>
<li>首先要确定你的机器（下面统称HTPC）的静态IP </li>
<li><p>在web界面，网络-防火墙-端口转发里，增加以下几条转发到此静态IP的规则</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">21-&gt;21：#For FTP</div><div class="line">20-&gt;20：#For FTP</div><div class="line">22-&gt;22：#For SSH remote login </div><div class="line">443-&gt;443：#For Https</div><div class="line">6800-&gt;6800：#For Aria2</div><div class="line">6801-&gt;6801：#For Aria2</div></pre></td></tr></table></figure>
</li>
<li><p><strong>你们可以注意到没有规则对80转发或者转发到80端口</strong></p>
</li>
</ul>
<h4 id="开启动态域名"><a href="#开启动态域名" class="headerlink" title="开启动态域名"></a>开启动态域名</h4><ul>
<li>可以在 <a href="http://changeip.com" target="_blank" rel="external">changeip.com</a>去申请，比如我申请了一个  <a href="http://testdomain.changeip.com" target="_blank" rel="external">testdomain.changeip.com</a>，这样在外网环境中结合上述端口映射，可以直接对内网中的HTPC进行操作，安装软件、修改服务、。<br><img src="http://upload-images.jianshu.io/upload_images/109760-3c69e9f50e814e5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
</ul>
<h4 id="出人意料的NTFS权限问题"><a href="#出人意料的NTFS权限问题" class="headerlink" title="出人意料的NTFS权限问题"></a>出人意料的NTFS权限问题</h4><ul>
<li>这个是历史遗留问题：<br>我的三块硬盘在放到htpc里时全是ntfs格式，上面都有数据，不能无损转成EXT4</li>
<li>owncloud的存贮路径是在其中一块硬盘上，原来是直接mount到/mnt目录下，在后面配置owncloud时指定存贮目录时，出现权限<strong>770</strong>问题</li>
<li>数据太多，不能格盘，在owncloud的官方网站上找了好久，找出是mount时出的 用户权限分配问题，后来通过修改 /etc/fstab 指定 mount时的uid等来解决<br><code>/dev/sdb5 /mnt/disk1 ntfs locale=zh_CN.UTF-8,uid=33,gid=33,dmask=007,windows_names 0 0</code></li>
<li>上面的uid=33,gid=33分别对应远行nginx的用户 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">***</div><div class="line">#### 安装samba和vsftp</div><div class="line">- ssh到HTPC后自行安装，并设置好目录</div><div class="line"></div><div class="line">#### 安装mysql</div><div class="line">- sudo apt-get install mysql-server mysql-client</div><div class="line"></div><div class="line">#### 安装nginx和php-fpm</div><div class="line">- 请给你的mysql设置一个比较强的root密码，并且为owncloud创建专有用户</div><div class="line">&gt; sudo apt-get install nginx  </div><div class="line">sudo add-apt-repository ppa:ondrej/php  </div><div class="line">sudo apt-get update     </div><div class="line">sudo apt-get install php7.0 php-fpm php-mysql php-mbstring  </div><div class="line"></div><div class="line">#### 安装phpmyadmin和owncloud</div><div class="line">- 直接从网上下载，解压到web服务目录</div><div class="line">- 我的web服务根目录是 ``/home/test/www``</div><div class="line">- 改变目录拥有者 ``sudo chown www-data -R /home/test/www``</div><div class="line">- 改变权限 `` sudo chmod 755 -R /home/test/www``</div><div class="line">- 配置phpmyadmin</div><div class="line"></div><div class="line">  - 拷贝原始配置文件</div></pre></td></tr></table></figure></li>
</ul>
<p>cd /home/test/www/phpmyadmin<br>cp config.sample.inc.php config.inc.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- 修改phpmyadmin的配置文件</div><div class="line">``vi /home/test/www/phpmyadmin/config.inc.php ``</div><div class="line">- 配置 ``$cfg[&apos;blowfish_secret&apos;] = &apos;$#%#$%#$%#$^#^ETETR&apos;;  ``就是一个加密信息，越乱越好</div><div class="line">- 配置另一个config文件</div></pre></td></tr></table></figure></p>
<p>cd /home/test/www/phpmyadmin/libraries<br>vi config.default.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  - 同样配置``$cfg[&apos;blowfish_secret&apos;]``</div><div class="line">  - 其他用默认</div><div class="line"></div><div class="line">#### 配置php7-fpm</div><div class="line">- php7.0的 配置环境在 /etc/php/7.0/fpm里，有*php-fpm.conf*和*php.ini*两个重要的配置文件</div><div class="line"> &gt; - **php.ini:**  </div><div class="line">   1. 设置 ```short_open_tag = On</div></pre></td></tr></table></figure></p>
<ol>
<li><figure class="highlight plain"><figcaption><span>= "/usr/lib/php/20151012"```，目录通过``catfish``搜索``mysql.so``找到，用于安装各种扩展，应该是``apt-get install``时自动放入。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">   3. 开启对mysql的支持:``extension=mysqli.so``，``extension=pdo_mysql.so``</div><div class="line">   4. 设置&apos;&apos;cgi.fix_pathinfo=0&apos;&apos; </div><div class="line"> - **php-fpm.conf:**</div><div class="line">可以看到 ``include=/etc/php/7.0/fpm/pool.d/*.conf``，里面有``www.conf``文件</div><div class="line">   1. 配置``listen``: ``listen = /run/php/php7.0-fpm.sock``，配置nginx时会用到</div><div class="line">   2. 重启php-fpm:``sudo service php7-fpm restart``</div><div class="line"></div><div class="line"></div><div class="line">#### nginx开启https，两种方案</div><div class="line">owncloud9.0强制要求https服务，需要对自己web站进行认证，实际中我试过两种方案，最后用的是第一种方案</div><div class="line">1. ###### 用自签名的SSL证书</div><div class="line">&gt; - 采用自验证方案，借用廖雪峰大神的脚本[给Nginx配置一个自签名的SSL证书](http://www.liaoxuefeng.com/article/0014189023237367e8d42829de24b6eaf893ca47df4fb5e000)</div><div class="line">&gt; - 运行这个脚本后，把生成的key文件和crt文件复制到``/etc/nginx/ssl/``目录，</div><div class="line">如``/etc/nginx/ssl/testdomain.changeip.com.crt``</div><div class="line">和``/etc/nginx/ssl/testdomain.changeip.com.key``</div><div class="line">配置nginx时要用到</div><div class="line">或者你直接在后面写nginx文件时指向这两个文件</div><div class="line"></div><div class="line">2.  ###### 用letsencypt加密自己的服务器</div><div class="line"> &gt; - 被大牛吐槽自授权是错误的价值观，在他的建议下换成 [Let’s Encrypt](https://letsencrypt.org/)（是一个免费、自动化、开放的证书颁发机构，由网络安全研究小组运作）的免费授权系统，主要参考了[Let&apos;s Encrypt SSL证书配置](http://www.jianshu.com/p/eaac0d082ba2)和[折腾Let‘s Encrypt免费SSL证书](https://xiaoai.me/?p=223)</div><div class="line">  - 下载安装</div></pre></td></tr></table></figure>
</li>
</ol>
<p>git clone <a href="https://github.com/certbot/certbot.git" target="_blank" rel="external">https://github.com/certbot/certbot.git</a><br>cd certbot<br>./letsencrypt-auto –help<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- 生成密钥，在这之前要**停止nginx**</div></pre></td></tr></table></figure></p>
<p>./letsencrypt-auto certonly -d testdomain.changip.com -m testdomain@gmail.com<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  - 这样，会生成</div><div class="line">```/etc/letsencrypt/live/testdomain.changeip.com/fullchain.pem</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">两个文件，不用移动位置</div><div class="line">  - 生成2048位 DH parameters：</div><div class="line">```sudo openssl dhparam -out /etc/nginx/ssl/dhparams.pem 2048</div></pre></td></tr></table></figure>
<ul>
<li>美中不足的是，这种方案只有90天的有效期，要到时候运行脚本renew </li>
</ul>
<hr>
<h4 id="owncloud"><a href="#owncloud" class="headerlink" title="owncloud"></a>owncloud</h4><ul>
<li>前面已经提到了很多owncloud的配置，都为实践中一一摸索得来，主要有<ol>
<li>专用mysql用户</li>
</ol>
<ul>
<li>https证书</li>
<li>php.ini配置</li>
<li>文件夹权限</li>
<li>端口映射</li>
<li>特别要强调，要把owncloud的数据文件目录的用户改成 <strong>www-data</strong>，权限也要改770</li>
</ul>
</li>
</ul>
<h4 id="aria2和yaaw"><a href="#aria2和yaaw" class="headerlink" title="aria2和yaaw"></a>aria2和yaaw</h4><ul>
<li>aria2可以apt-get安装或者编译安装，参考网上教程，至少能安装到1.19版本</li>
<li>yaaw下载后直接解压缩到/home/kodi/yaaw下</li>
<li><p>aria2的教程网上很多，我这里贴出我的配置，放在~/.aria2/aria2.conf里</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">rpc-secret=secret #token加密方式</div><div class="line">enable-rpc=true</div><div class="line">rpc-allow-origin-all=true</div><div class="line">rpc-listen-all=true</div><div class="line">rpc-listen-port=6800#nginx里有个转发到这个端口的设置</div><div class="line">rpc-secure=true</div><div class="line">rpc-certificate=/etc/letsencrypt/live/testdomain.changeip.com/fullchain.pem</div><div class="line">rpc-private-key=/etc/letsencrypt/live/testdomain.changeip.com/privkey.pem</div><div class="line">max-concurrent-downloads=5</div><div class="line">continue=true</div><div class="line">max-connection-per-server=5</div><div class="line">min-split-size=10M</div><div class="line">split=10</div><div class="line">max-overall-download-limit=3M</div><div class="line">max-download-limit=0</div><div class="line">max-overall-upload-limit=256K</div><div class="line">max-upload-limit=0</div><div class="line">dir=/mnt/disk2/Downloads</div><div class="line">disk-cache=32M</div><div class="line">file-allocation=prealloc</div><div class="line">input-file=/home/kodi/.aria2/aria2.session</div><div class="line">save-session=/home/kodi/.aria2/aria2.session</div></pre></td></tr></table></figure>
</li>
<li><p>在配置yaaw是关键一步，在<code>setting</code>后，要把<code>JSON-RPC Path</code>设置成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://token:secret@testdomain.changeip.com:6801/jsonrpc #请注意https和6801</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h4 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h4><ul>
<li>这一步配的头大，后来参考了owncloud官方配置文件才写出来</li>
<li>实际使用过程中又进行了不断的调整</li>
<li>你们可以注意到有个对 6801进行ssl加密又转发到6800端口的配置 ，这是为了让yaaw在全站加密的情况下，突破aria2c的server对https的兼容性问题</li>
<li>要解释的东西太多了，有些我还看不懂，以后一一写来<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line">upstream php5-handler &#123;</div><div class="line">    server unix:/var/run/php5-fpm.sock;</div><div class="line">&#125;</div><div class="line">upstream php7-handler &#123;</div><div class="line">    server unix:/run/php/php7.0-fpm.sock;</div><div class="line">&#125;</div><div class="line">server&#123;</div><div class="line">    listen 6801 ssl;</div><div class="line">    server_name testdomain.changeip.com;</div><div class="line">    ssl_certificate /etc/letsencrypt/live/testdomain.changeip.com/fullchain.pem;</div><div class="line">    ssl_certificate_key /etc/letsencrypt/live/testdomain.changeip.com/privkey.pem;</div><div class="line">    ssl_dhparam /etc/nginx/ssl/dhparams.pem;</div><div class="line">    ssl_ciphers &apos;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA&apos;;</div><div class="line">    ssl_prefer_server_ciphers  on;</div><div class="line">    location / &#123;</div><div class="line">        proxy_redirect off;</div><div class="line">        proxy_set_header Host $host;</div><div class="line">        proxy_set_header X-Real-IP $remote_addr;</div><div class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">        proxy_pass http://127.0.0.1:6800;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line">    listen 443 ssl;</div><div class="line">    server_name testdomain.changeip.com 192.168.10.150;</div><div class="line">    ssl_certificate /etc/letsencrypt/live/testdomain.changeip.com/fullchain.pem;</div><div class="line">    ssl_certificate_key /etc/letsencrypt/live/testdomain.changeip.com/privkey.pem;</div><div class="line">    ssl_dhparam /etc/nginx/ssl/dhparams.pem;</div><div class="line">    ssl_ciphers &apos;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA&apos;;</div><div class="line">    ssl_prefer_server_ciphers  on; </div><div class="line">    # Add headers to serve security related headers</div><div class="line">    # Before enabling Strict-Transport-Security headers please read into this topic first.</div><div class="line">    #add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload;&quot;;</div><div class="line">    add_header X-Content-Type-Options nosniff;</div><div class="line">    add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</div><div class="line">    add_header X-XSS-Protection &quot;1; mode=block&quot;;</div><div class="line">    add_header X-Robots-Tag none;</div><div class="line">    add_header X-Download-Options noopen;</div><div class="line">    add_header X-Permitted-Cross-Domain-Policies none;</div><div class="line">    add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains; preload&quot;;</div><div class="line">    # Path to the root of your installation</div><div class="line">    root /home/kodi/www/;</div><div class="line">    location = /robots.txt &#123;</div><div class="line">        allow all;</div><div class="line">        log_not_found off;</div><div class="line">        access_log off;</div><div class="line">    &#125;</div><div class="line">    location /luci&#123;</div><div class="line">	proxy_redirect off;</div><div class="line">        proxy_set_header Host $host;</div><div class="line">        proxy_set_header X-Real-IP $remote_addr;</div><div class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">        proxy_pass https://192.168.10.1;</div><div class="line">    &#125; </div><div class="line">    # The following 2 rules are only needed for the user_webfinger app.</div><div class="line">    # Uncomment it if you&apos;re planning to use this app.</div><div class="line">    #rewrite ^/.well-known/host-meta /owncloud/public.php?service=host-meta last;</div><div class="line">    #rewrite ^/.well-known/host-meta.json /owncloud/public.php?service=host-meta-json last;</div><div class="line">    location = /.well-known/carddav &#123; return 301 $scheme://$host/owncloud/remote.php/dav; &#125;</div><div class="line">    location = /.well-known/caldav &#123; return 301 $scheme://$host/owncloud/remote.php/dav; &#125;</div><div class="line">    location /.well-known/acme-challenge &#123; &#125;</div><div class="line">    location ^~ /phpmyadmin&#123;</div><div class="line">        location /phpmyadmin&#123;</div><div class="line">    		server_name_in_redirect off;</div><div class="line">    		index index.php;</div><div class="line">        &#125;</div><div class="line">        location ~ ^/phpmyadmin/(?:build|tests|config|lib|3rdparty|templates|data)/ &#123;</div><div class="line">            deny all;</div><div class="line">        &#125;</div><div class="line">        location ~ ^/phpmyadmin/(?:\.|autotest|occ|issue|indie|console) &#123;</div><div class="line">            deny all;</div><div class="line">        &#125;</div><div class="line">        location ~ &quot;^\/phpmyadmin\/.*\.php$&quot; &#123;</div><div class="line">     	    include fastcgi_params;</div><div class="line">            fastcgi_split_path_info ^(.+\.php)(/.+)$;</div><div class="line">            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</div><div class="line">            fastcgi_param PATH_INFO $fastcgi_path_info;</div><div class="line">            fastcgi_param HTTPS on;</div><div class="line">            fastcgi_param modHeadersAvailable true; #Avoid sending the security headers twice</div><div class="line">            fastcgi_param front_controller_active true;</div><div class="line">            fastcgi_pass php5-handler;</div><div class="line">            fastcgi_intercept_errors on;</div><div class="line">           # fastcgi_request_buffering off;</div><div class="line">        &#125;</div><div class="line">        location ~ &quot;^\/phpmyadmin\/.*\.\(htm|html|gif|jpg|png|js|css\)$&quot; &#123;</div><div class="line">            root /home/kodi/www;</div><div class="line">        &#125;     </div><div class="line">    &#125;</div><div class="line">    location ^~ /owncloud &#123;</div><div class="line">        # set max upload size</div><div class="line">        client_max_body_size 51200M;</div><div class="line">        fastcgi_buffers 64 4K;</div><div class="line">        # Disable gzip to avoid the removal of the ETag header</div><div class="line">        gzip off;</div><div class="line">        # Uncomment if your server is build with the ngx_pagespeed module</div><div class="line">        # This module is currently not supported.</div><div class="line">        #pagespeed off;</div><div class="line">        location /owncloud &#123;</div><div class="line">            rewrite ^ /owncloud/index.php$uri;</div><div class="line">        &#125;</div><div class="line">        location ~ ^/owncloud/(?:build|tests|config|lib|3rdparty|templates|data)/ &#123;</div><div class="line">            deny all;</div><div class="line">        &#125;</div><div class="line">        location ~ ^/owncloud/(?:\.|autotest|occ|issue|indie|db_|console) &#123;</div><div class="line">            deny all;</div><div class="line">        &#125;</div><div class="line">        location ~ ^/owncloud/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\.php(?:$|/) &#123;</div><div class="line">            include fastcgi_params;</div><div class="line">	    fastcgi_split_path_info ^(.+\.php)(/.+)$;</div><div class="line">            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;Gggg</div><div class="line">            fastcgi_param PATH_INFO $fastcgi_path_info;</div><div class="line">            fastcgi_param HTTPS on;</div><div class="line">            fastcgi_param modHeadersAvailable true; #Avoid sending the security headers twice</div><div class="line">            fastcgi_param front_controller_active true;</div><div class="line">            fastcgi_pass php5-handler;</div><div class="line">            fastcgi_intercept_errors on;</div><div class="line">           # fastcgi_request_buffering off;</div><div class="line">        &#125;</div><div class="line">        location ~ ^/owncloud/(?:updater|ocs-provider)(?:$|/) &#123;</div><div class="line">            try_files $uri/ =404;</div><div class="line">            index index.php;</div><div class="line">        &#125;</div><div class="line">        # Adding the cache control header for js and css files</div><div class="line">        # Make sure it is BELOW the PHP block</div><div class="line">        location ~* \.(?:css|js)$ &#123;</div><div class="line">            try_files $uri /owncloud/index.php$uri$is_args$args;</div><div class="line">            add_header Cache-Control &quot;public, max-age=7200&quot;;</div><div class="line">            # Add headers to serve security related headers  (It is intended to have those duplicated to the ones above)</div><div class="line">            # Before enabling Strict-Transport-Security headers please read into this topic first.</div><div class="line">            #add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload;&quot;;</div><div class="line">            add_header X-Content-Type-Options nosniff;</div><div class="line">            add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</div><div class="line">            add_header X-XSS-Protection &quot;1; mode=block&quot;;</div><div class="line">            add_header X-Robots-Tag none;</div><div class="line">            add_header X-Download-Options noopen;</div><div class="line">            add_header X-Permitted-Cross-Domain-Policies none;</div><div class="line">            # Optional: Don&apos;t log access to assets</div><div class="line">            access_log off;</div><div class="line">        &#125;</div><div class="line">        location ~* \.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ &#123;</div><div class="line">            try_files $uri /owncloud/index.php$uri$is_args$args;</div><div class="line">            # Optional: Don&apos;t log access to other assets</div><div class="line">            access_log off;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h4 id=&quot;起由&quot;&gt;&lt;a href=&quot;#起由&quot; class=&quot;headerlink&quot; title=&quot;起由&quot;&gt;&lt;/a&gt;起由&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;由于最近的“净网”行动，很多网盘包括我一直在使用的快盘关停，仍然存活的百度云、360云等又没有linux客户端，用Dr
    
    </summary>
    
    
      <category term="owncloud" scheme="http://leoatchina.github.io/tags/owncloud/"/>
    
      <category term="ubuntu" scheme="http://leoatchina.github.io/tags/ubuntu/"/>
    
      <category term="nginix" scheme="http://leoatchina.github.io/tags/nginix/"/>
    
      <category term="mysql" scheme="http://leoatchina.github.io/tags/mysql/"/>
    
      <category term="aria2" scheme="http://leoatchina.github.io/tags/aria2/"/>
    
  </entry>
  
  <entry>
    <title>linux下 各种解压文件使用方法</title>
    <link href="http://leoatchina.github.io/2017/03/02/unpress-method-in-linux-with-cmd/"/>
    <id>http://leoatchina.github.io/2017/03/02/unpress-method-in-linux-with-cmd/</id>
    <published>2017-03-02T02:04:49.000Z</published>
    <updated>2017-03-02T02:17:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>.xz<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">解包：tar xvf FileName.tar.xz</div><div class="line">打包：tar cvf FileName.tar DirName</div></pre></td></tr></table></figure></p>
<p>.tar<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> 解包：tar xvf FileName.tar</div><div class="line"> 打包：tar cvf FileName.tar DirName</div><div class="line">（注：tar是打包，不是压缩！）</div></pre></td></tr></table></figure></p>
<p> .gz<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　解压1：gunzip FileName.gz</div><div class="line">　　解压2：gzip -d FileName.gz</div><div class="line">　　压缩：gzip FileName</div></pre></td></tr></table></figure></p>
<p> .tar.gz 和 .tgz<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　　解压：tar zxvf FileName.tar.gz</div><div class="line">　　压缩：tar zcvf FileName.tar.gz DirName</div></pre></td></tr></table></figure></p>
<p>.bz2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　解压1：bzip2 -d FileName.bz2</div><div class="line">　　解压2：bunzip2 FileName.bz2</div><div class="line">　　压缩： bzip2 -z FileName</div></pre></td></tr></table></figure></p>
<p>.tar.bz2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　　解压：tar jxvf FileName.tar.bz2        或tar --bzip xvf FileName.tar.bz2</div><div class="line">　　压缩：tar jcvf FileName.tar.bz2 DirName</div></pre></td></tr></table></figure></p>
<p>.bz<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　解压1：bzip2 -d FileName.bz</div><div class="line">　　解压2：bunzip2 FileName.bz</div><div class="line">　　压缩：未知</div></pre></td></tr></table></figure></p>
<p>.tar.bz<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">解压：tar jxvf FileName.tar.bz</div><div class="line">压缩：未知</div></pre></td></tr></table></figure></p>
<p>.Z<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　解压：uncompress FileName.Z</div><div class="line">　压缩：compress FileName</div></pre></td></tr></table></figure></p>
<p>.tar.Z<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　　解压：tar Zxvf FileName.tar.Z</div><div class="line">　　压缩：tar Zcvf FileName.tar.Z DirName</div></pre></td></tr></table></figure></p>
<p>.zip<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　解压：unzip FileName.zip</div><div class="line">　　压缩：zip FileName.zip DirName</div><div class="line">　　压缩一个目录使用 -r 参数，-r 递归。例： $ zip -r FileName.zip DirName</div></pre></td></tr></table></figure></p>
<p>.rar<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">　　解压：rar x FileName.rar</div><div class="line">　　压缩：rar a FileName.rar DirName</div><div class="line">　　</div><div class="line">　　rar请到：http://www.rarsoft.com/download.htm 下载！</div><div class="line">　　解压后请将rar_static拷贝到/usr/bin目录（其他由$PATH环境变量指定的目录也可以）：</div><div class="line">　　[root@www2 tmp]# cp rar_static /usr/bin/rar</div></pre></td></tr></table></figure></p>
<p>.lha<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">　　解压：lha -e FileName.lha</div><div class="line">　　压缩：lha -a FileName.lha FileName</div><div class="line">　　</div><div class="line">　　lha请到：http://www.infor.kanazawa-it.ac.jp/~ishii/lhaunix/下载！</div><div class="line">　　&gt;解压后请将lha拷贝到/usr/bin目录（其他由$PATH环境变量指定的目录也可以）：</div><div class="line">　　[root@www2 tmp]# cp lha /usr/bin/</div></pre></td></tr></table></figure></p>
<p>　　.rpm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　解包：rpm2cpio FileName.rpm | cpio -div</div></pre></td></tr></table></figure></p>
<p>　　.deb<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　解包：ar p FileName.deb data.tar.gz | tar zxf -</div></pre></td></tr></table></figure></p>
<p>　　.tar .tgz .tar.gz .tar.Z .tar.bz .tar.bz2 .zip .cpio .rpm .deb .slp .arj .rar .ace .lha .lzh .lzx .lzs .arc .sda .sfx .lnx .zoo .cab .kar .cpt .pit .sit .sea<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">　　解压：sEx x FileName.*</div><div class="line">　　压缩：sEx a FileName.* FileName</div><div class="line">　　</div><div class="line">　　sEx只是调用相关程序，本身并无压缩、解压功能，请注意！</div><div class="line">　　sEx请到： http://sourceforge.net/projects/sex下载！</div><div class="line">　　解压后请将sEx拷贝到/usr/bin目录（其他由$PATH环境变量指定的目录也可以）：</div><div class="line">　　[root@www2 tmp]# cp sEx /usr/bin/</div></pre></td></tr></table></figure></p>
<p>Linux下常见文件解压方法及命令</p>
<blockquote>
<ol>
<li>以.a为扩展名的文件:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar xv file.a</div></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<ol>
<li><p>以.z为扩展名的文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uncompress file.Z</div></pre></td></tr></table></figure>
</li>
<li><p>以.gz为扩展名的文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gunzip file.gz</div></pre></td></tr></table></figure>
</li>
<li><p>以.bz2为扩展名的文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bunzip2 file.bz2</div></pre></td></tr></table></figure>
</li>
<li><p>以.tar.Z为扩展名的文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar xvZf file.tar.Z</div><div class="line">或 compress -dc file.tar.Z | tar xvf</div></pre></td></tr></table></figure>
</li>
<li><p>以.tar.gz/.tgz为扩展名的文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar xvzf file.tar.gz</div><div class="line">或 gzip -dc file.tar.gz | tar xvf -</div></pre></td></tr></table></figure>
</li>
<li><p>以.tar.bz2为扩展名的文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar xvIf file.tar.bz2</div><div class="line">或 bzip2 -dc file.tar.bz2 | xvf -</div></pre></td></tr></table></figure>
</li>
</ol>
<p>8.以.cpio.gz/.cgz为扩展名的文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gzip -dc file.cgz | cpio -div</div></pre></td></tr></table></figure></p>
<p>9.以.cpio/cpio为扩展名的文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cpio -div file.cpio</div><div class="line">或cpio -divc file.cpio</div></pre></td></tr></table></figure></p>
<p>10.以.rpm为扩展名的文件安装:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -i file.rpm</div></pre></td></tr></table></figure></p>
<p>11.以.rpm为扩展名的文件解压缩：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm2cpio file.rpm | cpio -div</div></pre></td></tr></table></figure></p>
<p>12.以.deb为扩展名的文件安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dpkg -i file.deb</div></pre></td></tr></table></figure></p>
<p>13.以.deb为扩展名的文件解压缩:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dpkg-deb -fsys-tarfile file.deb | tar xvf - ar p</div><div class="line">file.deb data.tar.gz | tar xvzf -</div></pre></td></tr></table></figure></p>
<p>14.以.zip为扩展名的文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unzip file.zip</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;.xz&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;t
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>没有X的vps上怎么配置才能复制vim界面里的文字</title>
    <link href="http://leoatchina.github.io/2017/03/02/copy-vim-words-from-vps-without-x/"/>
    <id>http://leoatchina.github.io/2017/03/02/copy-vim-words-from-vps-without-x/</id>
    <published>2017-03-02T02:02:33.000Z</published>
    <updated>2017-03-02T02:03:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>讨论见我在知乎上的提问<a href="https://www.zhihu.com/question/51838774/answer/128467453?from=profile_answer_card" target="_blank" rel="external">知乎讨论，没有X的vps上怎么配置才能复制vim界面里的文字？</a></p>
<p>环境阿里云，centos，无论是编译还是yum安装vim,在本地都不能在远程的vim上复制文字</p>
<blockquote>
<ol>
<li>在vps上安装 neovim或者vim-X11</li>
<li>并且安装xclip或者xsel</li>
<li>ssh <strong>-X</strong> user@host (注意 这个 -X)</li>
<li>用 nvim/vimx target，然后按正常操作</li>
<li>你可以在本地的clipboard里发现你复制过来的东西 ！！</li>
</ol>
</blockquote>
<p>如果你用 windows ssh过去，应该是 nvim+本地 lemonade或者doitclent的组合</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;讨论见我在知乎上的提问&lt;a href=&quot;https://www.zhihu.com/question/51838774/answer/128467453?from=profile_answer_card&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎讨
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ubuntu-MATE  16.04 LTS 安装笔记</title>
    <link href="http://leoatchina.github.io/2017/03/02/ubuntu-install-notes/"/>
    <id>http://leoatchina.github.io/2017/03/02/ubuntu-install-notes/</id>
    <published>2017-03-02T01:56:34.000Z</published>
    <updated>2017-03-02T01:59:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 bash 下删除libreoffice<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo apt-get remove --purge libreoffice*</div><div class="line"></div><div class="line">sudo apt-get clean</div><div class="line"></div><div class="line">sudo apt-get autoremove</div></pre></td></tr></table></figure></p>
<p>安装vim 等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:wiznote-team ppa:plushuang-tw/uget-stable ppa:t-tujikawa/ppa</div><div class="line"></div><div class="line">sudo apt-get remove vim</div><div class="line"></div><div class="line">sudo apt-get update</div><div class="line"></div><div class="line">sudo apt-get install vim-gnome wiznote fcitx-table-wbpy exfat-fuse exfat-utils uget aria2 clipit git zsh openssh-server grub-customizer software-center terminator okular</div></pre></td></tr></table></figure></p>
<p>安装编译相关<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install build-essential autoconf libtool pkg-config python-opengl python-imaging python-pyrex python-pyside.qtopengl idle-python2.7 qt4-dev-tools qt4-designer libqtgui4 libqtcore4 libqt4-xml libqt4-test libqt4-script libqt4-network libqt4-dbus python-qt4 python-qt4-gl libgle3 python-dev</div></pre></td></tr></table></figure></p>
<p>安装chromium</p>
<blockquote>
<p>在软件中心里搜索并且安装</p>
</blockquote>
<p>安装owncloud<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://software.opensuse.org/download/package?project=isv:ownCloud:desktop&amp;package=owncloud-client</div></pre></td></tr></table></figure></p>
<p>安装spf13<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/leoatchina/spf13-leoatchina-vim.git  </div><div class="line">cd spf13-leoatchina-vim </div><div class="line">bash bootstrap.sh</div></pre></td></tr></table></figure></p>
<p>安装atom<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">https://atom.io/download/deb</div><div class="line">注意同步</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 bash 下删除libreoffice&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>aria2+chrome+BaiduExporter破除速度限制下载百度云上的内容</title>
    <link href="http://leoatchina.github.io/2017/03/01/chrome-baiduexporter-aria2-baiduyun-download-no-limit/"/>
    <id>http://leoatchina.github.io/2017/03/01/chrome-baiduexporter-aria2-baiduyun-download-no-limit/</id>
    <published>2017-03-01T06:51:46.000Z</published>
    <updated>2017-03-01T07:14:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前我在windows下面时曾经写过一篇<br><a href="http://www.jianshu.com/p/540b20f1a6a3" target="_blank" rel="external">aria2+chrome+BaiduExporter下载百度云</a></p>
<p>转到mac平台后，方法有所调整</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前我在windows下面时曾经写过一篇&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/540b20f1a6a3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;aria2+chrome+BaiduExporter下载百度云&lt;/a
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sslocal+proxychains4解决阿里云vps访问github过慢问题</title>
    <link href="http://leoatchina.github.io/2017/03/01/proxychain-aliyun-shadowsocks/"/>
    <id>http://leoatchina.github.io/2017/03/01/proxychain-aliyun-shadowsocks/</id>
    <published>2017-03-01T06:47:56.000Z</published>
    <updated>2017-03-01T06:48:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>阿里云从github clone一些软件后再编译安装 ，速度都很慢。<br>试过改host或者设置 git的proxy，效果都不好，后来用 sslocal+proxychains4解决问题。</p>
<p><strong>1. 安装pip</strong></p>
<blockquote>
<p>wget -c <a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="external">https://bootstrap.pypa.io/get-pip.py</a><br>python get-pip.py</p>
</blockquote>
<p><strong>2. 安装 sslocal</strong></p>
<blockquote>
<p>pip install shadowsocks</p>
</blockquote>
<p><strong>3. 配置sslocal</strong></p>
<blockquote>
<p>vim ~/sslocal.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">&quot;server&quot;:&quot;1.1.1.1&quot;,    #可以使用的ss服务器IP</div><div class="line">&quot;server_port&quot;:1035,    #ss服务器端口</div><div class="line">&quot;local_address&quot;: &quot;0.0.0.0&quot;, #本地ip 注意：不要使用127.0.0.1或192.168.1.100等ip</div><div class="line">&quot;local_port&quot;:1080,#本地端口</div><div class="line">&quot;password&quot;:&quot;password&quot;,#连接ss服务器密码</div><div class="line">&quot;timeout&quot;:600,#等待超时</div><div class="line">&quot;method&quot;:&quot;rc4-md5&quot;#加密方式</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p><strong>4. 启动sslocal，并加入开机启动</strong></p>
<blockquote>
<p>nohup sslocal -c ~/sslocal .json &gt;/dev/null 2&gt;&amp;1 &amp;<br>echo “ nohup sslocal -c  ~/sslocal .json &gt;/dev/null 2&gt;&amp;1 &amp;”  &gt;/etc/rc.local</p>
</blockquote>
<p><strong>5. 编译安装最新版 proxychains4</strong></p>
<blockquote>
<p>wget -c <a href="https://github.com/rofl0r/proxychains-ng/releases/download/v4.11/proxychains-ng-4.11.tar.bz2" target="_blank" rel="external">https://github.com/rofl0r/proxychains-ng/releases/download/v4.11/proxychains-ng-4.11.tar.bz2</a><br>tar zxf proxychains-ng-4.11.tar.bz2<br>cd proxychains-ng-4.11<br>./configure &amp;&amp; make &amp;&amp; make install &amp;&amp; make install-config </p>
</blockquote>
<p><strong>6. 编辑proxychains4配置文件</strong></p>
<blockquote>
<p>vim /usr/local/etc/proxychains.conf<br>更改 <code>socks4 127.0.0.1 9050</code>为<code>socks5 127.0.0.1 1080</code></p>
</blockquote>
<p><strong>7. 测试下你的代理</strong></p>
<blockquote>
<p>proxychains4 curl <a href="https://api.ipify.org/?format=json" target="_blank" rel="external">https://api.ipify.org/?format=json</a></p>
</blockquote>
<p>如果配置正确，返回你的ss服务器的ip地址</p>
<p><strong>8. 用proxychain4+git下载</strong></p>
<blockquote>
<p>proxychains4 git clone <a href="https://github.com/xxxxx/xxxxx.git" target="_blank" rel="external">https://github.com/xxxxx/xxxxx.git</a></p>
</blockquote>
<p>下面是我的一个测试结果，速度从4k提升到了1.5m<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[proxychains] DLL init: proxychains-ng 4.11</div><div class="line">[proxychains] Strict chain  ...  127.0.0.1:1080  ...  github.com:443  ...  OK</div><div class="line">[proxychains] DLL init: proxychains-ng 4.11</div><div class="line">[proxychains] Strict chain  ...  127.0.0.1:1080  ...  github.com:443  ...  OK</div><div class="line">remote: Counting objects: 120391, done.</div><div class="line">[proxychains] DLL init: proxychains-ng 4.11</div><div class="line">remote: Total 120391 (delta 0), reused 0 (delta 0), pack-reused 120390</div><div class="line">Receiving objects: 100% (120391/120391), 84.22 MiB | 1.51 MiB/s, done.</div><div class="line">Resolving deltas: 100% (81308/81308), done.</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阿里云从github clone一些软件后再编译安装 ，速度都很慢。&lt;br&gt;试过改host或者设置 git的proxy，效果都不好，后来用 sslocal+proxychains4解决问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 安装pip&lt;/strong&gt;&lt;/p&gt;
&lt;blo
    
    </summary>
    
    
      <category term="shadowsocks" scheme="http://leoatchina.github.io/tags/shadowsocks/"/>
    
      <category term="github" scheme="http://leoatchina.github.io/tags/github/"/>
    
      <category term="阿里云" scheme="http://leoatchina.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>安装新版htslib、bcftools、samtools</title>
    <link href="http://leoatchina.github.io/2017/02/23/install_samtools_etc/"/>
    <id>http://leoatchina.github.io/2017/02/23/install_samtools_etc/</id>
    <published>2017-02-23T08:28:13.000Z</published>
    <updated>2017-02-14T07:07:27.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="官方网站和github上的INSTALL-README有问题，要按照下面的方法安装develop版本的"><a href="#官方网站和github上的INSTALL-README有问题，要按照下面的方法安装develop版本的" class="headerlink" title="官方网站和github上的INSTALL/README有问题，要按照下面的方法安装develop版本的"></a>官方网站和github上的INSTALL/README有问题，要按照下面的方法安装develop版本的</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git clone --branch=develop git://github.com/samtools/htslib.git</div><div class="line">git clone --branch=develop git://github.com/samtools/bcftools.git</div><div class="line">git clone --branch=develop git://github.com/samtools/samtools.git</div><div class="line">cd bcftools &amp;&amp; make &amp;&amp; make install</div><div class="line">cd ../samtools &amp;&amp; make &amp;&amp; make install</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;官方网站和github上的INSTALL-README有问题，要按照下面的方法安装develop版本的&quot;&gt;&lt;a href=&quot;#官方网站和github上的INSTALL-README有问题，要按照下面的方法安装develop版本的&quot; class=&quot;headerlin
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>leoatchina的第一篇hexo博客</title>
    <link href="http://leoatchina.github.io/2017/02/23/hello-world/"/>
    <id>http://leoatchina.github.io/2017/02/23/hello-world/</id>
    <published>2017-02-23T08:28:13.000Z</published>
    <updated>2017-02-15T10:24:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>leoatchina第一次用hexo进行博客写作，使用了<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">next</a>主题<br>leoatchina是用<strong>atom</strong>进行博客写作，可以在官方网站<a href="https://atom.io" target="_blank" rel="external">atom.io</a>上下载<br>之所以用这个软件，原因</p>
<ol>
<li>免费</li>
<li>配置可以用github进行同步</li>
<li>插件丰富,我主要用到的有<ul>
<li>markdown-preview-plus</li>
<li>markdown-writer </li>
<li>markdown-previwe-opener //自动打开markdown preview</li>
<li>markdown-scroll-sync //进行markdown写作时，写作区和预览区同步滚动</li>
<li>atom-hexo //hexo命令</li>
<li>vim-mode // 习惯vim的操作模式了</li>
<li><strong>markclip</strong>，//这个是利器 见下面</li>
</ul>
</li>
<li>写作时插入图片的方法<ol>
<li>首先，在<strong>主配置</strong>目录的_config.yml里，设置 <code>post_asset_folder: true</code></li>
<li>按正常的markdown语言进行写作</li>
<li>写作时正常截图，在安装了<strong>markclip</strong>之后，在文章里直接按<code>ctrl+v</code>,就可以在<code>source/_posts</code>目录下，建立一个和当前编辑的文件同名的文件夹，你的截图文件会自动放入这个文件夹，并在你markdown文件中插入这个图片的链接，如下<blockquote>
<p><img src="/2017/02/23/hello-world/aedc252b5e531dc5609dc30ce8b6f68e.png" alt=""></p>
</blockquote>
</li>
</ol>
</li>
<li>hexo clean | hexo g | hexo d，完成布置</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;leoatchina第一次用hexo进行博客写作，使用了&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;next&lt;/a&gt;主题&lt;br&gt;leoatchina是
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sslocal+proxychains4解决阿里云vps访问github过慢问题</title>
    <link href="http://leoatchina.github.io/2017/02/23/sslocal-proxychains-aliyun-github/"/>
    <id>http://leoatchina.github.io/2017/02/23/sslocal-proxychains-aliyun-github/</id>
    <published>2017-02-23T08:28:13.000Z</published>
    <updated>2017-02-15T04:52:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>阿里云从github clone一些软件后再编译安装 ，速度都很慢。<br>试过改host或者设置 git的proxy，效果都不好，后来用 sslocal+proxychains4解决问题。</p>
<p><strong>1. 安装pip</strong></p>
<blockquote>
<p>wget -c <a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="external">https://bootstrap.pypa.io/get-pip.py</a><br>python get-pip.py</p>
</blockquote>
<p><strong>2. 安装 sslocal</strong></p>
<blockquote>
<p>pip install shadowsocks</p>
</blockquote>
<p><strong>3. 配置sslocal</strong></p>
<blockquote>
<p>vim ~/sslocal.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;server&quot;:&quot;1.1.1.1&quot;,    #可以使用的ss服务器IP</div><div class="line">  &quot;server_port&quot;:1035,    #ss服务器端口</div><div class="line">  &quot;local_address&quot;: &quot;0.0.0.0&quot;, #本地ip 注意：不要使用127.0.0.1或192.168.1.100等ip</div><div class="line">  &quot;local_port&quot;:1080,#本地端口</div><div class="line">  &quot;password&quot;:&quot;password&quot;,#连接ss服务器密码</div><div class="line">  &quot;timeout&quot;:600,#等待超时</div><div class="line">  &quot;method&quot;:&quot;rc4-md5&quot;#加密方式</div></pre></td></tr></table></figure></p>
</blockquote>
<p><strong>4. 启动sslocal，并加入开机启动</strong></p>
<blockquote>
<p>nohup sslocal -c ~/sslocal .json &gt;/dev/null 2&gt;&amp;1 &amp;<br>echo “ nohup sslocal -c  ~/sslocal .json &gt;/dev/null 2&gt;&amp;1 &amp;”  &gt;/etc/rc.local</p>
</blockquote>
<p><strong>5. 编译安装最新版 proxychains4</strong></p>
<blockquote>
<p>wget -c <a href="https://github.com/rofl0r/proxychains-ng/releases/download/v4.11/proxychains-ng-5.11.tar.bz2o" target="_blank" rel="external">https://github.com/rofl0r/proxychains-ng/releases/download/v4.11/proxychains-ng-5.11.tar.bz2o</a><br>tar zxf proxychains-ng-4.11.tar.bz2<br>cd proxychains-ng-4.11<br>./configure &amp;&amp; make &amp;&amp; make install &amp;&amp; make install-config</p>
</blockquote>
<p><strong>6. 编辑proxychains4配置文件</strong></p>
<blockquote>
<p>vim /usr/local/etc/proxychains.conf<br>更改 <code>socks4 127.0.0.1 9050</code>为<code>socks5 127.0.0.1 1080</code></p>
</blockquote>
<p><strong>7. 测试下你的代理</strong></p>
<blockquote>
<p>proxychains4 curl <a href="https://api.ipify.org/?format=json" target="_blank" rel="external">https://api.ipify.org/?format=json</a></p>
</blockquote>
<p>如果配置正确，返回你的ss服务器的ip地址</p>
<p><strong>8. 用proxychain4+git下载</strong></p>
<blockquote>
<p>proxychains4 git clone <a href="https://github.com/xxxxx/xxxxx.git" target="_blank" rel="external">https://github.com/xxxxx/xxxxx.git</a></p>
</blockquote>
<p>下面是我的一个测试结果，速度从4k提升到了1.5m<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[proxychains] DLL init: proxychains-ng 4.11</div><div class="line">[proxychains] Strict chain  ...  127.0.0.1:1080  ...  github.com:443  ...  OK</div><div class="line">[proxychains] DLL init: proxychains-ng 4.11</div><div class="line">[proxychains] Strict chain  ...  127.0.0.1:1080  ...  github.com:443  ...  OK</div><div class="line">remote: Counting objects: 120391, done.</div><div class="line">[proxychains] DLL init: proxychains-ng 4.11</div><div class="line">remote: Total 120391 (delta 0), reused 0 (delta 0), pack-reused 120390</div><div class="line">Receiving objects: 100% (120391/120391), 84.22 MiB | 1.51 MiB/s, done.</div><div class="line">Resolving deltas: 100% (81308/81308), done.</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阿里云从github clone一些软件后再编译安装 ，速度都很慢。&lt;br&gt;试过改host或者设置 git的proxy，效果都不好，后来用 sslocal+proxychains4解决问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 安装pip&lt;/strong&gt;&lt;/p&gt;
&lt;blo
    
    </summary>
    
      <category term="翻墙" scheme="http://leoatchina.github.io/categories/%E7%BF%BB%E5%A2%99/"/>
    
    
      <category term="github" scheme="http://leoatchina.github.io/tags/github/"/>
    
      <category term="sslocal" scheme="http://leoatchina.github.io/tags/sslocal/"/>
    
      <category term="gfwlist" scheme="http://leoatchina.github.io/tags/gfwlist/"/>
    
      <category term="proxychains4" scheme="http://leoatchina.github.io/tags/proxychains4/"/>
    
      <category term="aliyun" scheme="http://leoatchina.github.io/tags/aliyun/"/>
    
  </entry>
  
  <entry>
    <title>在服务器上装r时踩到的坑</title>
    <link href="http://leoatchina.github.io/2017/02/21/install-r-with-zlib-support/"/>
    <id>http://leoatchina.github.io/2017/02/21/install-r-with-zlib-support/</id>
    <published>2017-02-21T01:53:13.000Z</published>
    <updated>2017-02-21T09:17:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么要在服务器上装R"><a href="#为什么要在服务器上装R" class="headerlink" title="为什么要在服务器上装R"></a>为什么要在服务器上装R</h3><p>其实原因很简单，服务器的性能更强，而且在装了anaconda2后，有比较理想的“云界面”，所以想要扩展R</p>
<h3 id="下载，安装"><a href="#下载，安装" class="headerlink" title="下载，安装"></a>下载，安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget &amp;&amp; tar &amp;&amp; <span class="built_in">cd</span> <span class="comment"># 这个都是常规，不表。出于实验的目的，我试了下无root权限安装</span></div><div class="line"><span class="comment"># 进行onfigure 这一步就出问题</span></div><div class="line">./configure --prefix=<span class="variable">$HOME</span>/R/R-3.3.2  --enable-R-shlib</div></pre></td></tr></table></figure>
<h3 id="安装zlib"><a href="#安装zlib" class="headerlink" title="安装zlib"></a>安装zlib</h3><p>上一步时一直提醒我缺少安装zlib1.2.5以上版本，将就下载，也是无root安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wget -c  http://www.zlib.net/zlib1211.zip  <span class="comment">#注意我下载 的是1.2.11版本</span></div><div class="line">unzip zlibi1211</div><div class="line"><span class="built_in">cd</span> zlib-1.2.11</div><div class="line">./configure --prefix=<span class="variable">$HOME</span>/packages</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure></p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>还是同样的问题，提醒没有zlib1.2.5以上版本，好，指定目录confiture</p>
<blockquote>
<p>./configure –prefix=$HOME/R/R-3.3.2  –enable-R-shlib LDFLAGS=”-L$HOME/packages/lib” CPPFLAGS=”-I$HOME/packages/include” </p>
</blockquote>
<p>始终不行，中途试过root权限，换安装位置，重新下载3.3.1等，设置编译参数，都不行</p>
<h3 id="检查configure代码"><a href="#检查configure代码" class="headerlink" title="检查configure代码"></a>检查configure代码</h3><blockquote>
<p>vim configure<br>发现了检查zlib版本的代码，有一个  <code>&gt;1.2.5</code></p>
</blockquote>
<h3 id="顿悟"><a href="#顿悟" class="headerlink" title="顿悟"></a>顿悟</h3><p>在网上搜索时，发现很多人也有这个问题，突然想到，是不是这个检查<code>zlib</code>版本的代码不对，导致这一步检测不过？<br>我用的是 <code>1.2.11</code>的包，这是一个<code>字符</code>，不是一个数字<br>是不是作为<code>字符来说</code>，是<code>1.2.11</code> &lt; <code>1.2.5</code> ?</p>
<h3 id="换装R3-2-5"><a href="#换装R3-2-5" class="headerlink" title="换装R3.2.5"></a>换装R3.2.5</h3><p>由于此时已经下载了3.2.5的R包，所以试试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=<span class="variable">$HOME</span>/R/R-3.2.5  --enable-R-shlib LDFLAGS=<span class="string">"-L<span class="variable">$HOME</span>/packages/lib"</span> CPPFLAGS=<span class="string">"-I<span class="variable">$HOME</span>/packages/include"</span>   <span class="comment"># 检查通过 ！！！看来这个问题可能在3.3.X的版本上</span></div><div class="line">make</div><div class="line">make install  <span class="comment"># 顺利装上</span></div></pre></td></tr></table></figure></p>
<h3 id="第二天检查-R-3-3-2的安装"><a href="#第二天检查-R-3-3-2的安装" class="headerlink" title="第二天检查 R-3.3.2的安装"></a>第二天检查 R-3.3.2的安装</h3><p>重新非root安装zlib1.2.8到<code>$HOME/packages</code>，然后去<code>configure</code>R-3.3.2<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=<span class="variable">$HOME</span>/R/R-3.3.2  --enable-R-shlib LDFLAGS=<span class="string">"-L<span class="variable">$HOME</span>/packages/lib"</span> CPPFLAGS=<span class="string">"-I<span class="variable">$HOME</span>/packages/include"</span>   <span class="comment"># 编译通过zlib，但是没通过bzip</span></div><div class="line"><span class="comment"># 不理他了，先用着已经装上的R-3.2.5版本吧！！！</span></div></pre></td></tr></table></figure></p>
<p>###　给anconda2安装R扩展<br>首先，要把R加入当前的$PATH，在你的’~/.zshrc’或者’~/.bashrc’里加入</p>
<blockquote>
<p>export PATH=”$HOME/anaconda2/bin:$HOME/R/R-3.2.5/bin:$PATH”<br>source ~/.zshrc </p>
</blockquote>
<h4 id="安装R的包"><a href="#安装R的包" class="headerlink" title="安装R的包"></a>安装R的包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">R  <span class="comment"># 第一样自然是启动R  </span></div><div class="line">install.packages(c(<span class="string">'repr'</span>, <span class="string">'IRdisplay'</span>, <span class="string">'evaluate'</span>, <span class="string">'crayon'</span>, <span class="string">'pbdoZMQ'</span>, <span class="string">'devtools'</span>, <span class="string">'uuid'</span>, <span class="string">'digest'</span>))</div><div class="line">devtools::install_github(<span class="string">'IRkernel/IRkernel'</span>)</div><div class="line">IRkernel::installspec()</div></pre></td></tr></table></figure>
<p>会有这样一句话 <code>[InstallKernelSpec] Installed kernelspec ir in /home/xx/.local/share/jupyter/kernels/ir</code>,同时你看到你可以生成R的文本了<br><img src="/2017/02/21/install-r-with-zlib-support/3dbfd2c7ddf1db7cf2235f26a560786c.png" alt=""></p>
<h4 id="在安装R包时可能碰到的问题"><a href="#在安装R包时可能碰到的问题" class="headerlink" title="在安装R包时可能碰到的问题"></a>在安装R包时可能碰到的问题</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 首先，是不能下载包</span></div><div class="line">options(download.file.method = <span class="string">"wget"</span>)  </div><div class="line"><span class="comment"># 编译时碰到的  libssl  libcrypto 文件找不到的问题</span></div><div class="line"><span class="built_in">cd</span> /usr/lib64</div><div class="line">sudo ln <span class="_">-s</span> libcrypto.so.1.0.1e libcrypto.so.1.0.0</div><div class="line">sudo ln <span class="_">-s</span> libssl.so.1.0.1e libssl.so.1.0.0</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;为什么要在服务器上装R&quot;&gt;&lt;a href=&quot;#为什么要在服务器上装R&quot; class=&quot;headerlink&quot; title=&quot;为什么要在服务器上装R&quot;&gt;&lt;/a&gt;为什么要在服务器上装R&lt;/h3&gt;&lt;p&gt;其实原因很简单，服务器的性能更强，而且在装了anaconda2后，有
    
    </summary>
    
    
      <category term="linux" scheme="http://leoatchina.github.io/tags/linux/"/>
    
      <category term="r" scheme="http://leoatchina.github.io/tags/r/"/>
    
      <category term="zlib" scheme="http://leoatchina.github.io/tags/zlib/"/>
    
      <category term="centos" scheme="http://leoatchina.github.io/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>学习Anaconda过程中的一些笔记，或者说踩过的坑</title>
    <link href="http://leoatchina.github.io/2017/02/20/anaconda-starter-turtorials/"/>
    <id>http://leoatchina.github.io/2017/02/20/anaconda-starter-turtorials/</id>
    <published>2017-02-20T06:12:52.000Z</published>
    <updated>2017-02-20T09:26:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Anaconda概述"><a href="#Anaconda概述" class="headerlink" title="Anaconda概述"></a>Anaconda概述</h3><p>Anaconda是一个用于科学计算的Python发行版，支持 Linux, Mac, Windows系统，提供了包管理与环境管理的功能，可以很方便地解决多版本python并存、切换以及各种第三方包安装问题。Anaconda利用工具/命令conda来进行package和environment的管理，并且已经包含了Python和相关的配套工具。<br><strong>conda</strong>可以理解为一个工具，也是一个可执行命令，其核心功能是包管理与环境管理。</p>
<ul>
<li>包管理与pip的使用类似，环境管理则允许用户方便地安装不同版本的python并可以快速切换。</li>
<li>Anaconda则是一个打包的集合，里面预装好了conda、某个版本的python、众多packages、科学计算工具等等，所以也称为Python的一种发行版</li>
<li>conda将几乎所有的工具、第三方包都当做package对待，甚至包括python和conda自身。所以，conda打破了包管理和环境管理约束，能非常方便地安装各种python</li>
<li>conda和virtualenv: 在我看来，<code>conda</code>是用于科学计算环境布置，<code>virtualenv</code>主要是用于web服务。</li>
</ul>
<h3 id="Anaconda安装"><a href="#Anaconda安装" class="headerlink" title="Anaconda安装"></a>Anaconda安装</h3><blockquote>
<p>去 <a href="https://repo.continuum.io/archive/" target="_blank" rel="external">https://repo.continuum.io/archive/</a> 下载最新版的 Anaconda<br>要说明的是, Anaconda有for python2和python3的版本，不过除了这个不同，其他基本没什么区别，我的生信服务器默认是python2，安装了Anaconda2<br>可以直接用wget下载 ，<code>wget -c https://repo.continuum.io/archive/Anaconda2-4.3.0-Linux-x86_64.sh</code><br>不用root安装 ，直接安装到<strong>当前用户</strong>，<code>bash Anaconda2-4.3.0-Linux-x86_64.sh</code>，会安装在<code>~/anaconda2</code><br><strong>注意运行路径</strong>，在安装anaconda时，会提醒你在<code>~/.bashrc</code>里加一句<code>export PATH=&quot;~/anaconda2/bin:$PATH&quot;</code>,但如果你是和我一样，是用<code>zsh</code>为shell，请注意在<code>~/.zshrc</code>里加上这一句<br>用户安装的不同的python环境都会被放在<code>~/anaconda/envs</code>下，可以在命令中运行<code>conda info -e</code> 查看已经安装的环境，当前已被激活的环境会显示有一个星号或者括号</p>
</blockquote>
<h3 id="换成更快的服务器"><a href="#换成更快的服务器" class="headerlink" title="换成更快的服务器"></a>换成更快的服务器</h3><blockquote>
<p><code>conda</code>的服务器在国外，如果直接去升级安装会很慢，<strong>要换成清华的镜像</strong><br><strong>如果不做这一步，非常容易出现不能升级安装conda包的情况</strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 添加Anaconda的TUNA镜像</span></div><div class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</div><div class="line"><span class="comment"># 设置搜索时显示通道地址</span></div><div class="line">conda config --set show_channel_urls yes</div></pre></td></tr></table></figure>
<h3 id="conda的环境管理"><a href="#conda的环境管理" class="headerlink" title="conda的环境管理"></a>conda的环境管理</h3><p>Conda的环境管理功能允许我们同时安装若干不同版本的Python，并能自由切换。对于上述安装过程，假设我们采用的是Python 2.7对应的安装包，那么Python 2.7就是默认的环境（默认名字是root，注意这个root不是超级管理员的意思。<br>比如我的python的是2.7.13，运行<code>python -V</code>，会显示<code>Python 2.7.13 :: Anaconda 4.3.0 (64-bit)</code><br>如果我要使用 python3.5，那就安装一个起名为python35的环境<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">conda create --name python35 python3.5</div><div class="line"><span class="comment"># 安装好后，使用activate激活某个环境</span></div><div class="line">activate python35 <span class="comment"># for Windows</span></div><div class="line"><span class="built_in">source</span> activate python35 <span class="comment"># for Linux &amp; Mac</span></div><div class="line"><span class="comment"># 激活后，会发现terminal输入的地方多了python35的字样，实际上，此时系统/做的事情就是把默认2.7环境从PATH中去除，再把3.5对应的命令加入PATH</span></div><div class="line"><span class="comment"># 你可以用 `which python`或者 `python -V`查看</span></div><div class="line"></div><div class="line"><span class="comment"># 如果想返回默认的python 2.7环境，运行</span></div><div class="line">deactivate python35 <span class="comment"># for Windows</span></div><div class="line"><span class="built_in">source</span> deactivate python35 <span class="comment"># for Linux &amp; Mac</span></div><div class="line"></div><div class="line"><span class="comment"># 删除一个已有的环境</span></div><div class="line">conda remove --name python35 --all</div></pre></td></tr></table></figure></p>
<h3 id="conda的包管理，和pip类似，比如你想安装scipy"><a href="#conda的包管理，和pip类似，比如你想安装scipy" class="headerlink" title="conda的包管理，和pip类似，比如你想安装scipy"></a>conda的包管理，和pip类似，比如你想安装scipy</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装scipy</span></div><div class="line">conda install scipy</div><div class="line"><span class="comment"># conda会从从远程搜索scipy的相关信息和依赖项目，对于python 3.4，conda会同时安装numpy和mkl（运算加速的库）</span></div></pre></td></tr></table></figure>
<p>conda的一些常用操作如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看当前环境下已安装的包</span></div><div class="line">conda list</div><div class="line"></div><div class="line"><span class="comment"># 查看某个指定环境的已安装包</span></div><div class="line">conda list -n python35</div><div class="line"></div><div class="line"><span class="comment"># 查找package信息</span></div><div class="line">conda search numpy</div><div class="line"></div><div class="line"><span class="comment"># 安装package</span></div><div class="line">conda install -n python35 numpy</div><div class="line"><span class="comment"># 如果不用-n指定环境名称，则被安装在当前活跃环境</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 更新package</span></div><div class="line">conda update -n python35 numpy</div><div class="line"></div><div class="line"><span class="comment"># 删除package</span></div><div class="line">conda remove -n python35 numpy</div></pre></td></tr></table></figure></p>
<p>conda将conda、python等都视为package，因此，完全可以使用conda来管理conda和python的版本，例如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 更新conda，保持conda最新</span></div><div class="line">conda update conda</div><div class="line"></div><div class="line"><span class="comment"># 更新anaconda</span></div><div class="line">conda update anaconda</div><div class="line"></div><div class="line"><span class="comment"># 更新python</span></div><div class="line">conda update python</div><div class="line"></div><div class="line"><span class="comment"># 安装python3.5的anaconda</span></div><div class="line">conda install -n python35 anacodnda</div><div class="line"><span class="comment"># 然后你会看到要安装这么多包!!!!!!</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/02/20/anaconda-starter-turtorials/342a8f848a70403e779c33891f407671.png" alt="你会看到这么多包！"></p>
<h3 id="布置jupyter-nookbook"><a href="#布置jupyter-nookbook" class="headerlink" title="布置jupyter nookbook"></a>布置jupyter nookbook</h3><p>首先安装下<code>ipython</code></p>
<blockquote>
<p>sudo yum install ipython</p>
</blockquote>
<p>生成配置文件</p>
<blockquote>
<p>jupyter notebook –generate-config<br>生成的文件为<code>~/.jupyter/jupyter_notebook_config.py</code></p>
</blockquote>
<p>生成密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ipython</div><div class="line">In [1]: from IPython.lib import passwd</div><div class="line">In [2]: passwd()</div><div class="line">Enter password: </div><div class="line">Verify password: </div><div class="line">Out[2]: &apos;sha1:7467b7351f12:79fc65998**************3003b87f3&apos;</div></pre></td></tr></table></figure></p>
<p>记录下这个 <code>sha1</code>值，以后要用到</p>
<p>生成jupyter配置文件<br><code>jupyter notebook --generate-config</code><br>以上将会在 ~/.jupyter/ 下创建默认config 文件: jupyter_notebook_config.py</p>
<p>修改jupyter配置文件 ，<code>vim ~/.jupyter/jupyter_notebook_config.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">c.NotebookApp.ip = <span class="string">'*'</span> <span class="comment">#任何ip都可以</span></div><div class="line">c.NotebookApp.open_browser = <span class="keyword">False</span></div><div class="line">c.NotebookApp.password = <span class="string">u'sha1:209f151dcd7f:a730a81fd00********3ec0a6aa31'</span><span class="comment">#设置密码的时候生成的sha1</span></div><div class="line">c.NotebookApp.port = <span class="number">8888</span><span class="comment"># 设置未被使用的端口</span></div><div class="line">c.NotebookApp.notebook_dir = <span class="string">u'/mnt/projects'</span> <span class="comment"># Notebook启动目录</span></div></pre></td></tr></table></figure></p>
<h3 id="启动jupyter"><a href="#启动jupyter" class="headerlink" title="启动jupyter"></a>启动jupyter</h3><p><code>jupyter notebook</code><br>然后你通过 <code>http://ip:8888就可以访问你的工作目录了</code></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.jianshu.com/p/2f3be7781451" target="_blank" rel="external">Anaconda使用总结 ypyb PeterYuan</a><br><a href="http://www.voidcn.com/blog/SA14023053/article/p-6066215.html" target="_blank" rel="external">Jupyter notebook 服务器端部署</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Anaconda概述&quot;&gt;&lt;a href=&quot;#Anaconda概述&quot; class=&quot;headerlink&quot; title=&quot;Anaconda概述&quot;&gt;&lt;/a&gt;Anaconda概述&lt;/h3&gt;&lt;p&gt;Anaconda是一个用于科学计算的Python发行版，支持 Linux, 
    
    </summary>
    
    
      <category term="anacond" scheme="http://leoatchina.github.io/tags/anacond/"/>
    
      <category term="python" scheme="http://leoatchina.github.io/tags/python/"/>
    
      <category term="linux" scheme="http://leoatchina.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>atom-shortcuts-windows</title>
    <link href="http://leoatchina.github.io/2017/02/16/atom-shortcuts-windows/"/>
    <id>http://leoatchina.github.io/2017/02/16/atom-shortcuts-windows/</id>
    <published>2017-02-16T06:00:08.000Z</published>
    <updated>2017-02-16T06:02:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>‘ctrl-shift-s’ 保存所有打开的文件<br>‘ctrl-shift-o’ 打开目录<br>‘ctrl-p’ 从添加的项目中查找文件<br>‘ctrl-f’ 向下翻页<br>‘ctrl-b’ 向上翻页<br>alt-b 或 ctrl-left 移动到单词开始<br>alt-f 或 ctrl-right 移动到单词末尾<br>ctrl-g 移动到指定行<br>ctrl-j 将下一行与当前行合并<br>ctrl-up, ctrl-down 使当前行向上或者向下移动<br>ctrl-enter,ctrl-shift-enter在当前行的下一行或上一行插入新的一行<br>ctrl-k ctrl-l使当前字符小写<br>ctrl-k ctrl-u使当前字符大写<br>ctrl-shift-D 复制当前行到下一行<br>ctrl-shift-K 删除当前行<br>ctrl-u删除到当前行开始<br>alt-backspace或ctrl-alt-h删除到当前子单词开始<br>alt-delete或ctrl-alt-d删除到当前子单词结束<br>ctrl-backspace或ctrl-w或alt-h删除到当前单词开始<br>alt-d或ctrl-delete删除到当前子单词开始<br>alt-left: ‘editor:move-to-previous-subword-boundary’<br>alt-right: ‘editor:move-to-next-subword-boundary’<br>alt-shift-left: ‘editor:select-to-previous-subword-boundary’<br>alt-shift-right: ‘editor:select-to-next-subword-boundary’</p>
<p>选取<br>alt-shift-B或 ctrl-shift-left 选取至字符开始<br>alt-shift-F或ctrl-shift-right 选取至字符结束<br>ctrl-a 全选<br>alt-f3选取文档中和当前单词相同的所有单词<br>shift-end 选取至本行结束<br>ctrl-l 选取一行，继续按回选取下一行<br>ctrl-d 选取文档中和当前单词相同的下一处</p>
<p>目录树操作<br>ctrl-\ 或 ctrl-k ctrl-b 显示或隐藏目录树<br>a 在目录树下添加文件<br>d 将当前文件另存为<br>alt-right 和 alt-left 展开(隐藏)所有目录<br>ctrl-k left 在左半视图中打开文件<br>ctrl-k down在下半视图中打开文件<br>ctrl-k up 在上半视图中打开文件<br>ctrl-k right 在右半视图中打开文件<br>ctrl-shift-C 复制当前文件绝对路径</p>
<p>其它<br>ctrl-m 相应括号之间，html tag之间等跳转<br>ctrl-alt-up, ctrl-alt-down 增加上（下）一行光标<br>ctrl-shift-u 调出切换编码选项<br>ctrl-f 在buffer中查找<br>ctrl-shift-f 在整个工程中查找<br>alt-ctrl-[ 折叠<br>alt-ctrl-] 展开<br>ctrl-alt-i调用控制台<br>ctrl-/注释<br>ctrl-alt-c打开color-picker</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件操作&quot;&gt;&lt;a href=&quot;#文件操作&quot; class=&quot;headerlink&quot; title=&quot;文件操作&quot;&gt;&lt;/a&gt;文件操作&lt;/h2&gt;&lt;p&gt;‘ctrl-shift-s’ 保存所有打开的文件&lt;br&gt;‘ctrl-shift-o’ 打开目录&lt;br&gt;‘ctrl-p’ 从添
    
    </summary>
    
    
      <category term="atom" scheme="http://leoatchina.github.io/tags/atom/"/>
    
      <category term="shortcuts" scheme="http://leoatchina.github.io/tags/shortcuts/"/>
    
  </entry>
  
  <entry>
    <title>Atom MacOs 快捷键</title>
    <link href="http://leoatchina.github.io/2017/02/16/atom-shortcuts-macos/"/>
    <id>http://leoatchina.github.io/2017/02/16/atom-shortcuts-macos/</id>
    <published>2017-02-16T05:39:55.000Z</published>
    <updated>2017-02-16T05:42:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件切换"><a href="#文件切换" class="headerlink" title="文件切换"></a>文件切换</h2><p><code>ctrl-shift-s</code>  保存所有打开的文件<br><code>cmd-shift-o</code>  打开目录<br><code>cmd-\</code>   显示或隐藏目录树<br><code>ctrl-0</code>   焦点移到目录树<br>目录树下，使用a，m，delete来增加，修改和删除<br><code>cmd-t</code>或<code>cmd-p</code> 查找文件<br><code>cmd-b</code> 在打开的文件之间切换<br><code>cmd-shift-b</code> 只搜索从上次git commit后修改或者新增的文件  </p>
<h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><p>（等价于上下左右）<br><code>ctrl-p</code> 前一行<br><code>ctrl-n</code> 后一行<br><code>ctrl-f</code> 前一个字符<br><code>ctrl-b</code> 后一个字符  </p>
<p><code>alt-B</code>, <code>alt-left</code> 移动到单词开始<br><code>alt-F</code>, <code>alt-right</code> 移动到单词末尾  </p>
<p><code>cmd-right</code>, <code>ctrl-E</code> 移动到一行结束<br><code>cmd-left</code>, <code>ctrl-A</code>  移动到一行开始  </p>
<p><code>cmd-up</code> 移动到文件开始<br><code>cmd-down</code> 移动到文件结束  </p>
<p><code>ctrl-g</code> 移动到指定行 row:column 处</p>
<p><code>cmd-r</code> 在方法之间跳转</p>
<h2 id="目录树操作"><a href="#目录树操作" class="headerlink" title="目录树操作"></a>目录树操作</h2><p><code>cmd-\</code> 或者 <code>cmd-k cmd-b</code> 显示(隐藏)目录树<br><code>ctrl-0</code> 焦点切换到目录树(再按一次或者<code>Esc</code>退出目录树)<br><code>a</code> 添加文件<br><code>d</code> 将当前文件另存为(duplicate)<br><code>i</code> 显示(隐藏)版本控制忽略的文件<br><code>alt-right</code> 和 <code>alt-left</code> 展开(隐藏)所有目录<br><code>ctrl-al-]</code> 和 <code>ctrl-al-[</code> 同上<br><code>ctrl-[</code> 和 <code>ctrl-]</code> 展开(隐藏)当前目录<br><code>ctrl-f</code> 和 <code>ctrl-b</code> 同上<br><code>cmd-k h</code> 或者 <code>cmd-k left</code> 在左半视图中打开文件<br><code>cmd-k j</code> 或者 <code>cmd-k down</code> 在下半视图中打开文件<br><code>cmd-k k</code> 或者 <code>cmd-k up</code> 在上半视图中打开文件<br><code>cmd-k l</code> 或者 <code>cmd-k right</code> 在右半视图中打开文件<br><code>ctrl-shift-C</code> 复制当前文件绝对路径</p>
<h2 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h2><p><code>cmd-F2</code> 在本行增加书签<br><code>F2</code> 跳到当前文件的下一条书签<br><code>shift-F2</code> 跳到当前文件的上一条书签<br><code>ctrl-F2</code> 列出当前工程所有书签  </p>
<h2 id="选取"><a href="#选取" class="headerlink" title="选取"></a>选取</h2><blockquote>
<p>大部分和导航一致，只不过加上shift  </p>
</blockquote>
<p><code>ctrl-shift-P</code>  选取至上一行<br><code>ctrl-shift-N</code>  选取至下一样<br><code>ctrl-shift-B</code>  选取至前一个字符<br><code>ctrl-shift-F</code>  选取至后一个字符<br><code>alt-shift-B</code>, <code>alt-shift-left</code>  选取至字符开始<br><code>alt-shift-F</code>, <code>alt-shift-right</code>  选取至字符结束<br><code>ctrl-shift-E</code>, <code>cmd-shift-right</code>  选取至本行结束<br><code>ctrl-shift-A</code>, <code>cmd-shift-left</code>  选取至本行开始<br><code>cmd-shift-up</code>  选取至文件开始<br><code>cmd-shift-down</code>  选取至文件结尾<br><code>cmd-A</code>  全选<br><code>cmd-L</code>  选取一行，继续按回选取下一行<br><code>ctrl-shift-W</code>  选取当前单词  </p>
<h2 id="编辑和删除文本"><a href="#编辑和删除文本" class="headerlink" title="编辑和删除文本"></a>编辑和删除文本</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p><code>ctrl-T</code> 使光标前后字符交换<br><code>cmd-J</code> 将下一行与当前行合并<br><code>ctrl-cmd-up</code>, <code>ctrl-cmd-down</code> 使当前行向上或者向下移动<br><code>cmd-shift-D</code> 复制当前行到下一行<br><code>cmd-K</code>, <code>cmd-U</code> 使当前字符大写<br><code>cmd-K</code>, <code>cmd-L</code> 使当前字符小写<br><code>cmd-shift-P</code> 搜索命令  </p>
<h3 id="删除和剪切"><a href="#删除和剪切" class="headerlink" title="删除和剪切"></a>删除和剪切</h3><p><code>ctrl-shift-K</code> 删除当前行<br><code>cmd-backspace</code> 删除到当前行开始<br><code>cmd-fn-backspace</code> 删除到当前行结束<br><code>ctrl-K</code> 剪切到当前行结束<br><code>alt-backspace</code> 或 <code>alt-H</code> 删除到当前单词开始<br><code>alt-delete</code> 或 <code>alt-D</code> 删除到当前单词结束  </p>
<h3 id="多光标和多处选取"><a href="#多光标和多处选取" class="headerlink" title="多光标和多处选取"></a>多光标和多处选取</h3><p><code>cmd-click</code> 增加新光标<br><code>cmd-shift-L</code> 将多行选取改为多行光标<br><code>ctrl-shift-up</code>, <code>ctrl-shift-down</code> 增加上（下）一行光标<br><code>cmd-D</code> 选取文档中和当前单词相同的下一处<br><code>ctrl-cmd-G</code> 选取文档中所有和当前光标单词相同的位置  </p>
<h3 id="括号跳转"><a href="#括号跳转" class="headerlink" title="括号跳转"></a>括号跳转</h3><p><code>ctrl-m</code> 相应括号之间，html tag之间等跳转<br><code>ctrl-cmd-m</code> 括号(tag)之间文本选取<br><code>alt-cmd-.</code> 关闭当前XML/HTML tag  </p>
<h3 id="编码方式"><a href="#编码方式" class="headerlink" title="编码方式"></a>编码方式</h3><p><code>ctrl-shift-U</code> 调出切换编码选项  </p>
<h2 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h2><p><code>cmd-F</code> 在buffer中查找<br><code>cmd-shift-f</code> 在整个工程中查找  </p>
<h2 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h2><p><code>alt-shift-S</code> 查看当前可用代码片段  </p>
<blockquote>
<p>在<code>~/.atom</code>目录下<code>snippets.cson</code>文件中存放了你定制的snippets  </p>
</blockquote>
<p><a href="https://atom.io/docs/v1.0.0/using-atom-snippets" target="_blank" rel="external">定制说明</a>  </p>
<h2 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h2><p><code>ctrl-space</code> 提示补全信息  </p>
<h2 id="折叠"><a href="#折叠" class="headerlink" title="折叠"></a>折叠</h2><p><code>alt-cmd-[</code> 折叠<br><code>alt-cmd-]</code> 展开<br><code>alt-cmd-shift-{</code> 折叠全部<br><code>alt-cmd-shift-}</code> 展开全部<br><code>cmd-k cmd-N</code> 指定折叠层级 N为层级数  </p>
<h2 id="文件语法高亮"><a href="#文件语法高亮" class="headerlink" title="文件语法高亮"></a>文件语法高亮</h2><p><code>ctrl-shift-L</code> 选择文本类型  </p>
<h2 id="使用Atom进行写作"><a href="#使用Atom进行写作" class="headerlink" title="使用Atom进行写作"></a>使用Atom进行写作</h2><p><code>ctrl-shift-M</code> Markdown预览<br>可用代码片段</p>
<blockquote>
<p>b, legal, img, l, i, code, t, table</p>
</blockquote>
<h2 id="git操作"><a href="#git操作" class="headerlink" title="git操作"></a>git操作</h2><p><code>cmd-alt-Z</code> checkout HEAD 版本<br><code>cmd-shift-B</code> 弹出untracked 和 modified文件列表<br><code>alt-g down</code> <code>alt-g up</code> 在修改处跳转<br><code>alt-G D</code> 弹出diff列表<br><code>alt-G O</code> 在github上打开文件<br><code>alt-G G</code> 在github上打开项目地址<br><code>alt-G B</code> 在github上打开文件blame<br><code>alt-G H</code> 在github上打开文件history<br><code>alt-G I</code> 在github上打开issues<br><code>alt-G R</code> 在github打开分支比较<br><code>alt-G C</code> 拷贝当前文件在gihub上的网址  </p>
<h2 id="推荐一些好用的插件"><a href="#推荐一些好用的插件" class="headerlink" title="推荐一些好用的插件"></a>推荐一些好用的插件</h2><ul>
<li>主题<br><a href="https://atom.io/themes/atom-material-ui" target="_blank" rel="external">atom-material-ui</a> 好看到爆<br><a href="https://atom.io/themes/atom-material-syntax" target="_blank" rel="external">atom-material-syntax</a></li>
<li>美化<br><a href="https://atom.io/packages/atom-beautify" target="_blank" rel="external">atom-beautify</a> 一键代码美化<br><a href="https://atom.io/packages/file-icons" target="_blank" rel="external">file-icons</a> 给文件加上好看的图标<br><a href="https://atom.io/users/atom-minimap" target="_blank" rel="external">atom-minimap</a> 方便美观的缩略滚动图<br><a href="https://atom.io/packages/pretty-json" target="_blank" rel="external">pretty-json</a> json格式化工具<br><a href="https://atom.io/packages/activate-power-mode" target="_blank" rel="external">activate-power-mode</a> 炫酷的打字特效</li>
<li>git<br><a href="https://atom.io/packages/atomatigit" target="_blank" rel="external">atomatigit</a> 可视化git操作<br><a href="https://atom.io/packages/git-time-machine" target="_blank" rel="external">git-time-machine</a> git版本对比工具，可视化选择每一个commit<br><a href="https://atom.io/packages/merge-conflicts" target="_blank" rel="external">merge-conflicts</a> 合并冲突可视化工具</li>
<li>代码提示<br><a href="https://atom.io/packages/emmet" target="_blank" rel="external">emmet</a> 这个不用介绍了吧<br><a href="https://atom.io/packages/atom-ternjs" target="_blank" rel="external">atom-ternjs</a> js代码提示很强大，高度定制化<br><a href="https://atom.io/packages/docblockr" target="_blank" rel="external">docblockr</a> jsdoc 给js添加注释<br><a href="https://atom.io/packages/autoclose-html" target="_blank" rel="external">autoclose-html</a> 闭合html标签<br><a href="https://atom.io/packages/color-picker" target="_blank" rel="external">color-picker</a> 取色器 必备插件<br><a href="https://atom.io/packages/pigments" target="_blank" rel="external">pigments</a> 颜色显示插件 必装<br><a href="https://atom.io/packages/terminal-panel" target="_blank" rel="external">terminal-panel</a> 直接在atom里面写命令了<br><a href="https://atom.io/packages/svg-preview" target="_blank" rel="external">svg-preview</a> svg预览</li>
<li>便捷操作<br><a href="https://atom.io/packages/advanced-open-file" target="_blank" rel="external">advanced-open-file</a> 快速打开、切换文件<br><a href="https://atom.io/packages/project-folder" target="_blank" rel="external">project-folder</a> 快速打开、切换项目<br><a href="https://atom.io/packages/script" target="_blank" rel="external">script</a> 立即执行当前js文件</li>
<li>高亮<br><a href="https://atom.io/packages/language-vue" target="_blank" rel="external">language-vue</a> vue框架代码高亮</li>
<li>终端<br><a href="https://atom.io/packages/platformio-ide-terminal" target="_blank" rel="external">platformio-atom-ide-terminal</a> 终端插件，支持显示、隐藏及多窗口</li>
</ul>
<p>就这些了，欢迎pull更多好用的插件！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件切换&quot;&gt;&lt;a href=&quot;#文件切换&quot; class=&quot;headerlink&quot; title=&quot;文件切换&quot;&gt;&lt;/a&gt;文件切换&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ctrl-shift-s&lt;/code&gt;  保存所有打开的文件&lt;br&gt;&lt;code&gt;cmd-shift-o&lt;/cod
    
    </summary>
    
    
      <category term="atom" scheme="http://leoatchina.github.io/tags/atom/"/>
    
      <category term="shortcuts" scheme="http://leoatchina.github.io/tags/shortcuts/"/>
    
  </entry>
  
  <entry>
    <title>centos升级gcc</title>
    <link href="http://leoatchina.github.io/2017/02/15/update-centos-gcc-compile-myself/"/>
    <id>http://leoatchina.github.io/2017/02/15/update-centos-gcc-compile-myself/</id>
    <published>2017-02-15T01:43:18.000Z</published>
    <updated>2017-02-15T04:55:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>我的生信小型机装的系统是centos6.6,在装vim的插件YouCompleteMe时，需要gcc升级到4.8以上版本。网上搜索了一番后，编译安装最新版。</p>
<ol>
<li><p>下载最新版gcc并解压</p>
<blockquote>
<p>wget -c <a href="http://ftp.gnu.org/gnu/gcc/gcc-6.3.0/gcc-6.3.0.tar.bz2" target="_blank" rel="external">http://ftp.gnu.org/gnu/gcc/gcc-6.3.0/gcc-6.3.0.tar.bz2</a><br>tar jxvf gcc-6.3.0.tar.bz2</p>
</blockquote>
</li>
<li><p>下载另外所需文件</p>
<blockquote>
<p>cd gcc-6.3.0<br>./contrib/download_prerequisites　</p>
</blockquote>
</li>
<li><p>建立一个目录供编译出的文件存放</p>
<blockquote>
<p>mkdir gcc-build-6.3.0<br>cd gcc-build-6.3.0</p>
</blockquote>
</li>
<li><p>生成Makefile文件,注意我把prefix设置成了 <strong>/usr</strong>,直接把gcc装到对应的目录，不需要ln -s了</p>
<blockquote>
<p>../configure -enable-checking=release -enable-languages=c,c++ -disable-multilib –prefix=/usr</p>
</blockquote>
</li>
<li><p>编译,j后面是核心数，我因为是小型服务器，一共8核16线程，所以就设置的比较大，一般设置成4</p>
<blockquote>
<p>make -j8  //我的cpu跑到了差不多满100%<br><img src="/2017/02/15/update-centos-gcc-compile-myself/aa67e42e4668d405cd430d0e656364ac.png" alt=""></p>
</blockquote>
</li>
<li><p>安装</p>
<blockquote>
<p>sudo make install  </p>
</blockquote>
</li>
<li><p>检查,如</p>
<blockquote>
<p>gcc –version<br>c++ –version<br>cc –version<br>whereis gcc<br>which gcc</p>
</blockquote>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的生信小型机装的系统是centos6.6,在装vim的插件YouCompleteMe时，需要gcc升级到4.8以上版本。网上搜索了一番后，编译安装最新版。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载最新版gcc并解压&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;wget -c &lt;a
    
    </summary>
    
      <category term="linux" scheme="http://leoatchina.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://leoatchina.github.io/tags/linux/"/>
    
      <category term="centos" scheme="http://leoatchina.github.io/tags/centos/"/>
    
      <category term="gcc" scheme="http://leoatchina.github.io/tags/gcc/"/>
    
      <category term="编译" scheme="http://leoatchina.github.io/tags/%E7%BC%96%E8%AF%91/"/>
    
      <category term="c++" scheme="http://leoatchina.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>python_thread_sync</title>
    <link href="http://leoatchina.github.io/2017/02/14/python-thread-sync/"/>
    <id>http://leoatchina.github.io/2017/02/14/python-thread-sync/</id>
    <published>2017-02-14T07:55:14.000Z</published>
    <updated>2017-02-17T07:30:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Python的代码的执行是由Python虚拟机（又名解释器主循环）进行控制的。Python在设计时就是这样考虑的，在主循环中同时只能有一个控制线程在执行，就像单核CPU系统中的多进程一样。内存中可以有许多程序，但是在任意给定时刻只能有一个程序在运行。同理，尽管Python解释器中可以运行多个线程，但是在任意给定时刻只有一个线程会被解释器执行。<br>对Python虚拟机的访问是由全局解释锁（GIL）控制的。这个锁就是用来保证同时只能有一个线程运行的。在多线程环境中，Python虚拟机将按下面所述的方式执行。</p>
<ol>
<li>设置GIL。</li>
<li>切换进一个线程去运行。</li>
<li>执行下面操作之一。 <ul>
<li>指定数量的字节码指令</li>
<li>线程主动让出控制权</li>
</ul>
</li>
<li>把线程设置回睡眠状态</li>
<li>解锁GIL</li>
<li>重复上述步骤</li>
</ol>
<p>在讨论普通的GIL之前，有一点要强调的是GIL只会影响到那些严重依赖CPU的程序（比如计算型的）。 如果你的程序大部分只会设计到I/O，比如网络交互，那么使用多线程就很合适， 因为它们大部分时间都在等待。<br>对于CPU依赖型的程序，你要搞清楚计算的特点。把性能瓶颈优化到关键的部分，如对数组的操作用NumPy这样的模块就非常的高效。</p>
<h2 id="theading模块"><a href="#theading模块" class="headerlink" title="theading模块"></a>theading模块</h2><p>是最常用的多线程模块,老的thread模块就不用看了</p>
<blockquote>
<p>有Thread、Lock、Rock、Condition、Event、Semaphore、BoundedSemphore、Timer、Barrier等一系列可用对象  </p>
</blockquote>
<h3 id="Thread对象"><a href="#Thread对象" class="headerlink" title="Thread对象"></a>Thread对象</h3><h4 id="基本代码"><a href="#基本代码" class="headerlink" title="基本代码"></a>基本代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 建立对象</span></div><div class="line">t = threading.Thread(target = function, args = (arg1,arg2))</div><div class="line"><span class="comment"># 一般来说，Thread线程对象建立之后，不是马上启动的，是用start方法启动</span></div><div class="line">t.start()</div><div class="line"><span class="comment"># 加入主线程，如果不加入，在主线程退出后仍然运行。join()方法只有在你需要等待线程完成的时候才是有用的</span></div><div class="line"><span class="comment"># join如果不被调用 ，将会一直被运行</span></div><div class="line">t.join()</div></pre></td></tr></table></figure>
<h4 id="Thread启动后不能用ctrl-c手动终止的解决方法"><a href="#Thread启动后不能用ctrl-c手动终止的解决方法" class="headerlink" title="Thread启动后不能用ctrl+c手动终止的解决方法"></a>Thread启动后不能用<code>ctrl+c</code>手动终止的解决方法</h4><p>这里引用别人描述</p>
<blockquote>
<p>爬虫作为子线程运行时不受键盘中断信号影响，Ctrl-C无法终止整个爬虫运行。另外的一个场景是多线程压力测试，需要提前终止的情况下，Ctrl-C依旧不能终止整个程序。除了简单粗暴的使用kill命令强行终止之外，本文将给出一个简单可行的解决方案。<br>可能,python2 和python3对于异常的处理逻辑不一致，2中所有的异常在主线程真正退出时才被捕获。   </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Python的代码的执行是由Python虚拟机（又名解释器主循环）进行控制的。Python在设计时就是这样考虑的，在主循环中同时只能有一个控
    
    </summary>
    
      <category term="python" scheme="http://leoatchina.github.io/categories/python/"/>
    
    
      <category term="python" scheme="http://leoatchina.github.io/tags/python/"/>
    
      <category term="thread" scheme="http://leoatchina.github.io/tags/thread/"/>
    
  </entry>
  
</feed>
